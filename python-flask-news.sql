-- phpMyAdmin SQL Dump
-- version 5.1.1deb5ubuntu1
-- https://www.phpmyadmin.net/
--
-- Máy chủ: localhost:3306
-- Thời gian đã tạo: Th6 05, 2024 lúc 06:46 AM
-- Phiên bản máy phục vụ: 10.6.16-MariaDB-0ubuntu0.22.04.1
-- Phiên bản PHP: 8.1.2-1ubuntu2.17

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Cơ sở dữ liệu: `python-flask-news`
--

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `alembic_version`
--

CREATE TABLE `alembic_version` (
  `version_num` varchar(32) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Đang đổ dữ liệu cho bảng `alembic_version`
--

INSERT INTO `alembic_version` (`version_num`) VALUES
('555999978708');

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `category`
--

CREATE TABLE `category` (
  `name` varchar(20) NOT NULL,
  `id` int(11) NOT NULL,
  `thumbnail` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Đang đổ dữ liệu cho bảng `category`
--

INSERT INTO `category` (`name`, `id`, `thumbnail`) VALUES
('Flask', 1, NULL),
('ExpressJS', 2, NULL),
('WordPress', 3, NULL),
('Laravel', 4, NULL);

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `post`
--

CREATE TABLE `post` (
  `name` varchar(255) NOT NULL,
  `description` text DEFAULT NULL,
  `excerpt` text DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `category_id` int(11) NOT NULL,
  `id` int(11) NOT NULL,
  `thumbnail` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Đang đổ dữ liệu cho bảng `post`
--

INSERT INTO `post` (`name`, `description`, `excerpt`, `active`, `created_date`, `category_id`, `id`, `thumbnail`) VALUES
('Getting Started with Flask', '<h3>Introduction</h3>\r\n<p>Welcome to my multi-part article on how to build a basic React Application using a Flask API with GraphQL layer in-between.</p>\r\n<ul>\r\n<li>Part 1 will focus on the basics of&nbsp;<strong><em>Python, Flask Web Framework, and how to connect it to a PostgreSQL Database</em></strong>.</li>\r\n<li>Part 2, we will step into slightly more advanced Flask concepts and discuss how to use a&nbsp;<strong><em>Large Application File Structure, Flask Blueprints, and Flask Application Factory Format</em></strong>.</li>\r\n<li>Part 3, we will build our models and connect our backend to&nbsp;<strong><em>GraphQL</em></strong>. Then we will use a&nbsp;<strong><em>code-first</em></strong>&nbsp;approach to build out our schemas and resolver functions.</li>\r\n<li>Part 4, I will talk about how to create a basic&nbsp;<strong><em>React App</em></strong>&nbsp;for our frontend with&nbsp;<strong><em>Webpack5</em></strong>.</li>\r\n<li>Part 5, I will talk about how to connect our&nbsp;<em>React App</em>&nbsp;to&nbsp;<em>GraphQL</em>&nbsp;to send data to the&nbsp;<em>Flask API</em>.</li>\r\n</ul>\r\n<p>I was inspired to write these articles because of the difficulties I faced early in my journey to become a web developer. I was initially trying to build an application using both React and Flask web frameworks when I quickly realized the lack of information that existed on how to connect these two technologies into a single application. Also, I know that I learn best when I am explaining a concept (I used to be a teacher) so I am also using this as an outlet to help me better understand the fundamentals, so please feel free to comment if you have recommendations!</p>\r\n<p>I started out learning how to code in Python and it was also what I used to teach my students when I was a High School Computer Science Teacher, so I wanted to build web applications using a language I was familiar with. Shortly after starting this journey, I understood that if I wanted to build modern and dynamic web applications then I would need Javascript and React. Most of the courses and information I found on these technologies only taught how to use Javascript on the backend using Node.js, so I had a hard time figuring out how to connect to two technologies. After hours of googling, reading through Stack Overflow forums, and simple trial and error, I eventually got the two technologies to talk to each other and successfully built my first React &amp; Flask application. So Let&rsquo;s get started.</p>\r\n<h2><a href=\"https://dev.to/bredmond1019/getting-started-with-flask-7de#getting-started-with-flask-basics\" name=\"getting-started-with-flask-basics\"></a>Getting Started with Flask Basics</h2>\r\n<p><em>I will assume some knowledge throughout this article:</em></p>\r\n<ul>\r\n<li>You should be comfortable with the basics of Python (basic data types, functions, importing files, classes, etc.).</li>\r\n<li>I will be using the command line often to run commands for Flask and using the Python Shell to test some of our code. I typically develop on Linux, so I&rsquo;ll use those commands.</li>\r\n<li>Basic SQL, I will be using PostgreSQL (I chose this one because it is what I learned on.).</li>\r\n<li>Basic HTML and CSS (I will be using SCSS here, but the syntax is the same as CSS more or less).</li>\r\n</ul>\r\n<h3><a href=\"https://dev.to/bredmond1019/getting-started-with-flask-7de#creating-project-directory-amp-virtual-environment\" name=\"creating-project-directory-amp-virtual-environment\"></a>CREATING PROJECT DIRECTORY &amp; VIRTUAL ENVIRONMENT</h3>\r\n<p>Let&rsquo;s jump right into it. The first thing we&rsquo;re going to want to do is create a project directory where we will store all of our files. Being organized is super important as a developer! I typically keep all of my projects in a&nbsp;<em>Development</em>&nbsp;folder inside the&nbsp;<em>Documents</em>&nbsp;folder. I&rsquo;ll name my folder&nbsp;<em>Flask_Project</em>, but you can name it whatever you&rsquo;d like.</p>\r\n<p>Open up your terminal and enter the following. You may need to create the Development and Documents folder as well.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>cd ~/Documents/Development\r\nmkdir Flask_Project\r\ncd Flask_Project\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Next, if you haven&rsquo;t already, we can install python&rsquo;s virtual environment package. I think using a virtual environment is very important. Sometimes we use different libraries for different projects that don&rsquo;t mix well, or we need different versions. I think it&rsquo;s a good habit to get into and definitely recommend using it. I&rsquo;ll name my virtual environment&nbsp;<em>flaskenv</em>.</p>\r\n<ul>\r\n<li>\r\n<p>Install the venv library<br><code>sudo apt install python3-venv</code></p>\r\n</li>\r\n<li>\r\n<p>Create the flaskenv environment<br><code>python3 -m venv flaskenv</code></p>\r\n</li>\r\n<li>\r\n<p>Activate the virtual environment<br><code>source flaskenv/bin/activate</code></p>\r\n</li>\r\n</ul>\r\n<p>If you want to deactivate your environment, just type&nbsp;<code>deactivate</code>&nbsp;in the terminal.<br>**On a side note, I typically use python&rsquo;s&nbsp;<a href=\"https://virtualenvwrapper.readthedocs.io/en/latest/\">virtualenvwrapper</a>. It&rsquo;s only slightly more difficult to set up, but makes working in virtual environments super easy. Once set up, you just need to type&nbsp;<code>workon &lt;name_of_env&gt;</code>&nbsp;and it&rsquo;s activated. And it stores all your environments in one directory.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/getting-started-with-flask-7de#installing-flask\" name=\"installing-flask\"></a>INSTALLING FLASK</h3>\r\n<p>Now that our environment is set up we can install Flask.</p>\r\n<p><code>python3 -m pip3 install flask</code></p>\r\n<p>We can get into the habit of adding all of our installed packages into a&nbsp;<code>requirements.txt</code>&nbsp;file. This will be useful if something happens to our virtualenv and we need to make another one and won&rsquo;t have to remember all the libraries we installed.</p>\r\n<p><code>pip3 freeze &gt; requirements.txt</code></p>\r\n<p>Now we can verify that Flask was actually installed. In the command line, we will open up the python shell and then import flask.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>python3 \r\nimport flask\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>If you haven&rsquo;t received any error messages, then you know that flask was installed correctly. If you do receive an error message, you may have to uninstall flask and reinstall it, or python was never installed, etc. I&rsquo;ll leave that to you.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/getting-started-with-flask-7de#building-a-simple-web-application\" name=\"building-a-simple-web-application\"></a>BUILDING A SIMPLE WEB APPLICATION</h3>\r\n<p>One of the beautiful things about flask, is that you can have a super simple, functional web application in just 5 lines of code &ndash; I&rsquo;ll show you in a second. It won&rsquo;t be pretty or anything special, but in 5 lines of code, you have a web application. I&rsquo;ve used Django before in the past, another python web framework which is also really great, but it has a lot of overhead and a lot of code to get started. Since our goal here is just to build a basic backend API, Flask will serve our needs just fine.</p>\r\n<p>Open up your IDE of choice, I usually use Visual Studio Code, and open it to your project directory:&nbsp;<code>~/Documents/Development/Flask_Project</code>. If you&rsquo;re unsure how to do this, you can just go to&nbsp;<em>File -&gt; Open Folder -&gt; Flask_Project</em>. Once you are in your project&rsquo;s directory, you can create a python file, I&rsquo;ll call mine flask.py. Here is where I&rsquo;ll show you how to create a very basic flask application.</p>\r\n<p>In your flask.py file, write the following:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\r\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\r\n\r\n<span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span> <span class=\"err\">&lsquo;</span><span class=\"o\">/</span><span class=\"err\">&rsquo;</span> <span class=\"p\">)</span>\r\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\r\n     <span class=\"k\">return</span> <span class=\"err\">&lsquo;</span><span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"n\">Hello</span> <span class=\"n\">World</span><span class=\"err\">!</span><span class=\"o\">&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"err\">&rsquo;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p><strong><em>And that&rsquo;s all it takes!</em></strong></p>\r\n<p>Let&rsquo;s see if it works by going to the terminal either in VS Code or using whichever terminal you prefer, and make sure we are in our project directory&nbsp;<code>~/Documents/Development/Flask_Project</code>.&nbsp;<strong>If we aren&rsquo;t in the project directory, the app won&rsquo;t run!</strong>&nbsp;Also, we want to make sure that our virtual env is active. You should see the name of the virtual environment,&nbsp;<em>flaskenv</em>&nbsp;(or whatever you named yours), either to the left or the right of the terminal. If not, you&rsquo;ll have to activate it again:</p>\r\n<p><code>source flaskenv/bin/activate</code></p>\r\n<p>Next, we&rsquo;ll export our flask.py file to tell the flask server where to look for the file.</p>\r\n<p><code>export FLASK_APP=flask.py</code></p>\r\n<p>Make sure you don&rsquo;t include any spaces, just&nbsp;<code>FLASK_APP=flask.py</code>. Then we can run flask in the terminal.</p>\r\n<p><code>flask run</code></p>\r\n<p>You should see something like:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>Serving Flask app &ldquo;flask&rdquo;\r\nRunning on http://127.0.0.1:5000/ (press CTRL + C to quit)\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>If you encountered an error, it could be a couple things. Most likely you may not be in the project directory in your terminal or you may not have activated your virtual environment properly.</p>\r\n<p>Next, go to any web browser &ndash; Chrome or Firefox will suffice &ndash; and type in&nbsp;<code>http://localhost:5000/</code>&nbsp;in the address bar at the top. Hit enter, and you should see&nbsp;<strong>Hello World!</strong>&nbsp;in big bold letters. Congrats! You build your first flask application.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/getting-started-with-flask-7de#creating-a-more-dynamic-web-app-with-variables\" name=\"creating-a-more-dynamic-web-app-with-variables\"></a>CREATING A MORE DYNAMIC WEB APP WITH VARIABLES</h3>\r\n<p>We can also make our application a bit more dynamic and include a variable we want to be passed to the application. Let&rsquo;s say we want to collect some user information and add a&nbsp;<em>/users</em>&nbsp;route to our application.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\r\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\r\n\r\n<span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span> <span class=\"err\">&lsquo;</span><span class=\"o\">/</span><span class=\"err\">&rsquo;</span> <span class=\"p\">)</span>\r\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\r\n    <span class=\"k\">return</span> <span class=\"err\">&lsquo;</span><span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"n\">Hello</span> <span class=\"n\">World</span><span class=\"err\">!</span><span class=\"o\">&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"err\">&rsquo;</span>\r\n\r\n<span class=\"c1\"># We can add this view function \r\n# and put our variable brackets \r\n# like this: &lt;variable&gt; \r\n</span><span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"err\">&lsquo;</span><span class=\"o\">/</span><span class=\"n\">users</span><span class=\"o\">/&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span><span class=\"err\">&rsquo;</span><span class=\"p\">)</span>\r\n<span class=\"k\">def</span> <span class=\"nf\">user</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\r\n    <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"err\">&lsquo;</span><span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span> <span class=\"n\">Hello</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"p\">}</span><span class=\"err\">!</span><span class=\"o\">&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"err\">&rsquo;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Notice that the variable&nbsp;<em>name</em>&nbsp;is the same in the&nbsp;<em>@app.route section</em>, as well as in the function definition and in the return statement. This is important. This will eventually be one of the ways we pass data from the front end to the backend.</p>\r\n<p>Now we can again go to our browser, but this time type in&nbsp;<code>http://localhost:5000/users/Brandon</code>&nbsp;and we should see&nbsp;<strong>Hello, Brandon!</strong>&nbsp;in big bold letters. Of course you can replace Brandon with whatever name or word you prefer, feel free to play around with it.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/getting-started-with-flask-7de#debug-mode\" name=\"debug-mode\"></a>DEBUG MODE</h3>\r\n<p>One other thing I would like to add is how to activate Debug Mode on the flask server. Right now, the way we ran the server was in production mode when we called flask run. So next time, when we start our server, we can type the following:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>export FLASK_APP=flask.py\r\nexport FLASK_DEBUG=1\r\nflask run\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>And this will activate debug mode. This is really helpful because it will display in the web browser any errors that occurred and make it easier for you to see what is going wrong in your application. It also set\'s the server to restart each time you make and save a change in any files inside the directory, allowing the changes to take effect in the web browser without having to stop and restart the server again yourself.</p>\r\n<p>** You will have to export both FLASK_APP and FLASK_DEBUG every time you reload your terminal or open your project again. Eventually, you will need to set up environmental variables for your application so you won&rsquo;t have to do this every time. This is another reason I really like virtualenvwrapper because they have a postactivate hook that will automatically run anytime you start the virtual env and you can place all the env variables there! There are other tools like dot-env for python that you can use.&nbsp;<a href=\"https://dev.to/jakewitcher/using-env-files-for-environment-variables-in-python-applications-55a1\">Here\'s an article</a>&nbsp;on using a .env file.</p>\r\n<p>Next we&rsquo;re going on to talking about how to install PostgreSQL, flask sqlalchemy, and setting up our database.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/getting-started-with-flask-7de#setting-up-postgresql-database\" name=\"setting-up-postgresql-database\"></a>Setting up PostgreSQL Database</h3>\r\n<p>You will need to install PostgreSQL, or any other SQL database, onto your machine where you are running your flask web server. Since the focus of this article is mostly to talk about flask, I will link a few articles on how to get Postgres setup on your machine. I use postgres because that is what I learned on, but any other SQL database will work just fine. If you already have one installed on your machine, then skip ahead to the next section about Flask-SQLAlchemy.</p>\r\n<ul>\r\n<li><a href=\"https://www.postgresql.org/download/\">The actual site for PostgreSQL</a></li>\r\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart\">Tutorial for Linux</a></li>\r\n<li><a href=\"https://www.robinwieruch.de/postgres-sql-macos-setup/\">Tutorial for Mac</a></li>\r\n<li><a href=\"https://www.geeksforgeeks.org/install-postgresql-on-windows/\">Tutorial for Windows</a></li>\r\n</ul>\r\n<p>Once you&rsquo;ve installed Postgres correctly, you can verify that it&rsquo;s working by typing psql in the command line and hitting enter. You should see something like&nbsp;<code>postgres=#</code>&nbsp;or something similar, maybe the name you used to set it up, but you shouldn&rsquo;t see an invalid command error. If so, then you need to review your installation.</p>\r\n<p>Inside of our psql shell, we&rsquo;re going to create a database for our project. We will use the&nbsp;<code>CREATE DATABASE</code>&nbsp;command for psql to create a database called flaskapp</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>    postgres=# CREATE DATABASE flaskapp;\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Don&rsquo;t forget the semi-colon at the end or it will think that you are entering more information. It should say CREATE DATABASE after you&rsquo;ve done it correctly. We can check that it&rsquo;s been added by typing backslash and lower case L to list the databases ( &ldquo;\\l&rdquo; without the quotes). Once there, you should see the name flaskapp written in a table under NAME. Now you can hit lower case Q and it will leave the screen. Then backslash q to quit out of psql.</p>\r\n<p>This is most of what we will have to do with postgres directly, moving forward we will use a flask library called&nbsp;<code>flask-sqlalchemy</code>&nbsp;that will help us deal with all database related material. Flask-SQLAlchemy works with SQL databases like Postgres, MySql, SQLite, etc. So if you are not using Postgres, the rest of this tutorial will still work just fine.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/getting-started-with-flask-7de#using-flasksqlalchemy-to-connect-to-postegresql\" name=\"using-flasksqlalchemy-to-connect-to-postegresql\"></a>Using Flask-SQLAlchemy to Connect to PostegreSQL</h3>\r\n<p>Next we are going to install Flask-SQLAlchemy. This works seamlessly with the SQL databases. Again, I will be using Postgres for this tutorial, but any popular SQL database will be just fine, you may need to slightly alter a line or two of code in our configuration, but the rest will be the same. I&rsquo;ll try to highlight where those differences are as well.</p>\r\n<p>In our terminal, let&rsquo;s again make sure we are in our project directory. Also, that we are in our virtual environment. See above if you forgot how to access those.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>    python3 -m pip3 install flask-sqlalchemy\r\n    python3 -m pip3 install psycopg2-binary\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>After that installs, again, let&rsquo;s verify that it&rsquo;s installed correctly by going into our python shell and importing it. When we import SQLAlchemy, we need to make sure we use an underscore instead of a dash, like we used to install it.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>    python3\r\n    import flask_sqlalchemy\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>If no errors come up, we&rsquo;re good to go and we can move on. Otherwise, you may need to reinstall flask sqlalchemy, or check that you&rsquo;re in the right directory or the virtual environment.</p>\r\n<p>Now let&rsquo;s set up the configuration in our flask app to talk to the database. Let&rsquo;s open up our flask.py file and add a couple lines of code. As a reminder, this is what we should have already as a minimum:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\r\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\r\n\r\n<span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span> <span class=\"err\">&lsquo;</span><span class=\"o\">/</span><span class=\"err\">&rsquo;</span> <span class=\"p\">)</span>\r\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\r\n    <span class=\"k\">return</span> <span class=\"err\">&lsquo;</span><span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"n\">Hello</span> <span class=\"n\">World</span><span class=\"err\">!</span><span class=\"o\">&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"err\">&rsquo;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Now we can add the following lines of code.<br>** if you are using a different database, your app.config line will be different **</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">flask_sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemy</span>\r\n\r\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\r\n\r\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"err\">&lsquo;</span><span class=\"n\">SQLALCHEMY_DATABASE_URL</span><span class=\"err\">&rsquo;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"err\">&ldquo;</span><span class=\"n\">postgresql</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">username</span><span class=\"p\">:</span><span class=\"n\">password</span><span class=\"o\">@</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">5432</span><span class=\"o\">/</span><span class=\"n\">flaskapp</span><span class=\"err\">&rdquo;</span>\r\n\r\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">SQLAlchemy</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\r\n\r\n<span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span> <span class=\"err\">&lsquo;</span><span class=\"o\">/</span><span class=\"err\">&rsquo;</span> <span class=\"p\">)</span>\r\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\r\n    <span class=\"k\">return</span> <span class=\"err\">&lsquo;</span><span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"n\">Hello</span> <span class=\"n\">World</span><span class=\"err\">!</span><span class=\"o\">&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"err\">&rsquo;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>So if you are using a different database, your postgresql://username line will look slightly different. A quick google search will tell you what you need to put. Or leave a comment and I&rsquo;ll try to help. Also, where I wrote username:password you will have to use the username and password for your psql database that you are using. I believe the default&nbsp;<strong>username</strong>&nbsp;is&nbsp;<em>postgres</em>&nbsp;and so is the&nbsp;<strong>password</strong>, or the password is an empty string.</p>\r\n<p><strong>To review, we discussed:</strong></p>\r\n<ul>\r\n<li>Installing Flask</li>\r\n<li>Building a simple Flask web application</li>\r\n<li>Set up PostgreSQL Database</li>\r\n<li>Installed Flask SQLAlchemy to be able to communicate with our database</li>\r\n</ul>\r\n<p>In the next part of this series, we will discuss how to structure your application so it is flexible and able to scale if the application grows, building an application factory, using Flask Blueprints, creating a config.py file, and creating an application script to run all of our code. See you then!</p>', '<p>Welcome to my multi-part article on how to build a basic React Application using a Flask API with GraphQL layer in-between.</p>', 1, '2024-06-05 05:52:21', 1, 1, NULL),
('Flask Application Factory', '<p>Welcome to Part 2 of my multi-part tutorial on building a React, Flask, and GraphQL application. Before we get started on building our models, I wanted to first talk about the structure of our application and the file system. As I&rsquo;ve mentioned, it&rsquo;s very important for a developer to stay organized &ndash; whether it&rsquo;s in regards to our code, our components, or our file system. Since our project is going to be growing, we need to structure ourselves to allow us to scale accordingly. I&rsquo;m going to briefly talk about Flask&rsquo;s application factory and how to structure our file system to help keep our application able to scale.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/flask-application-factory-1j81#large-application-structure\" name=\"large-application-structure\"></a>LARGE APPLICATION STRUCTURE</h3>\r\n<p>Let&rsquo;s say the project I&rsquo;m working on is called&nbsp;<em>Findr</em>, an application that will help developers find other developers to collaborate with. Here is a basic example of how my projects are usually organized.</p>\r\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2a6I2KnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gzzcchrnajvmvggakjs.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2a6I2KnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gzzcchrnajvmvggakjs.png\" alt=\"File Structure\" width=\"505\" height=\"730\" loading=\"lazy\"></a></p>\r\n<p>For now, we will just be working in the backend section.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/flask-application-factory-1j81#application-factory\" name=\"application-factory\"></a>APPLICATION FACTORY</h3>\r\n<p>In the previous article, we created just a single file application. This is very useful if you just need to do some small task or need a quick backend server. That being said, in the single file application our app instance is created right away and we won&rsquo;t be able to change any of our configurations. As our application starts to scale and our configurations need to change dynamically, we will want to use a&nbsp;<em>factory function</em>&nbsp;to delay the creation of our application &ndash; this is especially useful for testing.</p>\r\n<p>If you haven&rsquo;t done so already, let&rsquo;s create a file directory called&nbsp;<em>Findr</em>. Inside of that directory we will create another directory called&nbsp;<em>backend</em>. And finally within that, let&rsquo;s create a file called&nbsp;<code>__init__.py</code>. That&rsquo;s a double underscore, just to be clear! Python will recognize this as the file called when we instantiate the application.</p>\r\n<p><em>Findr / backend / __init</em><em>.py:</em></p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">flask_sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemy</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>  <span class=\"c1\"># we&rsquo;ll discuss the config file next\r\n</span>\r\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">SQLAlchemy</span><span class=\"p\">(</span> <span class=\"p\">)</span>\r\n\r\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">(</span><span class=\"n\">config_name</span><span class=\"p\">):</span>\r\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\r\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">config_name</span><span class=\"p\">])</span>\r\n    <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">config_name</span><span class=\"p\">].</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\r\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">from_pyfile</span><span class=\"p\">(</span><span class=\"err\">&ldquo;</span><span class=\"p\">..</span><span class=\"o\">/</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"err\">&rdquo;</span><span class=\"p\">)</span>\r\n\r\n    <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\r\n\r\n    <span class=\"kn\">from</span> <span class=\"nn\">.api</span> <span class=\"kn\">import</span> <span class=\"n\">api</span> <span class=\"k\">as</span> <span class=\"n\">api_blueprint</span>  <span class=\"c1\"># We will discuss blueprints shortly as well\r\n</span>    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">register_blueprint</span><span class=\"p\">(</span><span class=\"n\">api_blueprint</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"err\">&rsquo;</span><span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"err\">&rsquo;</span><span class=\"p\">)</span>\r\n\r\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Here, the&nbsp;<code>create_app( )</code>&nbsp;function is the application factory. It will take an argument of the name of the configuration type we are using (Development, Production, Testing, etc), which will be stored in a&nbsp;<em>config.py</em>&nbsp;file we will create momentarily. We created an uninitialized extension,&nbsp;<em>SQLAlchemy</em>, outside of the factory, then when we call&nbsp;<code>init_app( )</code>&nbsp;on it later, it initializes it.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/flask-application-factory-1j81#configuration-file\" name=\"configuration-file\"></a>CONFIGURATION FILE</h3>\r\n<p>Next, we will create our&nbsp;<em>config.py</em>&nbsp;file. This will hold all of our information for the databases and any future configurations we may need, for example Flask Mail settings to connect your application to GMail, etc.</p>\r\n<p><em>Findr / config.py</em></p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\r\n   <span class=\"n\">SQLALCHEMY_TRACK_MODIFICATIONS</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\r\n\r\n   <span class=\"o\">@</span><span class=\"nb\">staticmethod</span>\r\n   <span class=\"k\">def</span> <span class=\"nf\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\r\n       <span class=\"k\">pass</span>\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">DevelopmentConfig</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">):</span>\r\n   <span class=\"n\">DEBUG</span><span class=\"o\">=</span><span class=\"bp\">True</span>\r\n   <span class=\"n\">SQLALCHEMY_DATABASE_URI</span> <span class=\"o\">=</span> <span class=\"s\">\'postgresql://&lt;username&gt;:&lt;password&gt;@localhost:5432/findr\'</span>\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">TestingConfig</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">):</span>\r\n   <span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\r\n   <span class=\"n\">TESTING</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\r\n   <span class=\"n\">SQLALCHEMY_DATABASE_URI</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\r\n       <span class=\"s\">\"TEST_DATABASE_URL\"</span><span class=\"p\">)</span>\r\n\r\n\r\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n   <span class=\"s\">\'development\'</span><span class=\"p\">:</span> <span class=\"n\">DevelopmentConfig</span><span class=\"p\">,</span>\r\n   <span class=\"s\">\'testing\'</span><span class=\"p\">:</span> <span class=\"n\">TestingConfig</span><span class=\"p\">,</span>\r\n\r\n   <span class=\"s\">\'default\'</span><span class=\"p\">:</span> <span class=\"n\">DevelopmentConfig</span><span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Let&rsquo;s break this down. First, we build a class Config that holds data we want all of our subclasses to have. Also we wrote the class method&nbsp;<code>init_app( )</code>&nbsp;that we saw earlier in our application factory above. Then we have two subclasses:&nbsp;<em>DevelopmentConfig</em>&nbsp;and&nbsp;<em>TestingConfig</em>&nbsp;which demonstrate two different ways to access the&nbsp;<em>SQLAlchemy Database URI</em>&nbsp;&ndash; we can write the string out directly, or call it from an environmental variable we may have set up. Finally, there is a dictionary called&nbsp;<code>config</code>&nbsp;that we also called in the application factory to let us know which configuration we want to use. We have different configurations since, for example, if we are testing our application, we may want to manipulate the database and don&rsquo;t want it to interfere with our development or production databases.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/flask-application-factory-1j81#flask-blueprints\" name=\"flask-blueprints\"></a>FLASK BLUEPRINTS</h3>\r\n<p>Since we converted to an application factory, the way we initially handled views with&nbsp;<code>@app.route(&lsquo;/home&rsquo;)</code>&nbsp;won&rsquo;t do the job anymore. Now that our application is created at runtime, the app.route decorator exists only after&nbsp;<code>create_app( )</code>&nbsp;is invoked, which is too late.</p>\r\n<p>We can have many different Blueprints in our application, each with their own views, errors, etc. We could write each Blueprint in a single file or create some structure to allow us to scale if we need to. Let&rsquo;s create our first Blueprint:</p>\r\n<p><em>Findr / backend / api / __init</em><em>.py:</em></p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Blueprint</span>\r\n\r\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">Blueprint</span><span class=\"p\">(</span><span class=\"err\">&lsquo;</span><span class=\"n\">api</span><span class=\"err\">&rsquo;</span><span class=\"p\">,</span> <span class=\"n\">__name__</span><span class=\"p\">)</span>\r\n\r\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span><span class=\"p\">,</span> <span class=\"n\">errors</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>First, we imported&nbsp;<em>Blueprint</em>&nbsp;from flask. Then, much like we created our initial application, we created the api blueprint with the name of &lsquo;api&rsquo;. Finally, we imported the files that are to be associated with this particular blueprint that will be kept in the same directory as this blueprint. These will be files like the view functions and any error handling, etc.&nbsp;<strong><em>It is important that the import comes at the bottom so we can avoid circular dependencies in these files</em></strong>.</p>\r\n<p>We already registered the blueprint with our app back in the application factory where I had commented. So, the last thing we need to talk about in order to get our application up and running, is the&nbsp;<em>application script</em>.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/flask-application-factory-1j81#application-script\" name=\"application-script\"></a>APPLICATION SCRIPT</h3>\r\n<p>In the&nbsp;<code>app.py</code>&nbsp;file in the top-level directory is where the actual application instance is defined. In this file we will need to create the application, declare which configuration we are using, call Flask-Migrate so we can make our migrations to the application for the database, and create the custom context for the flask shell we will use to help debug our code and databases.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">backend</span> <span class=\"kn\">import</span> <span class=\"n\">create_app</span><span class=\"p\">,</span> <span class=\"n\">db</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">flask_migrate</span> <span class=\"kn\">import</span> <span class=\"n\">Migrate</span>\r\n\r\n<span class=\"c1\"># We still need to create our models\r\n# The following code you can comment out \r\n# if you want to run the application now\r\n# Otherwise wait until we build these models next\r\n</span><span class=\"kn\">from</span> <span class=\"nn\">backend.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\r\n\r\n\r\n\r\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">(</span><span class=\"s\">\'development\'</span><span class=\"p\">)</span>\r\n<span class=\"n\">migrate</span> <span class=\"o\">=</span> <span class=\"n\">Migrate</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">)</span>\r\n\r\n\r\n\r\n<span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">shell_context_processor</span>\r\n<span class=\"k\">def</span> <span class=\"nf\">make_shell_context</span><span class=\"p\">():</span>\r\n   <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">User</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">)</span>\r\n\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Besides our models, we have a fully functional flask application using an application factory format!</p>\r\n<p>To review, we discussed:</p>\r\n<ul>\r\n<li>How to structure a large Flask application</li>\r\n<li>How to create the Application Factory function</li>\r\n<li>How to create our config.py file</li>\r\n<li>How to create a Flask Blueprint to hold our views, errors, etc</li>\r\n<li>How to create our application script to run all of our code</li>\r\n</ul>\r\n<p>In the next part of this series, we will see how to build out our models, use SQLAlchemy to store them in the database, connect our Flask backend to GraphQL and write out our schema and resolver functions. See you there!</p>', '<p>Welcome to Part 2 of my multi-part tutorial on building a React, Flask, and GraphQL application. Before we get started on building our models, I wanted to first talk about the structure of our application and the file system.</p>', 1, '2024-06-05 05:59:38', 1, 3, NULL);
INSERT INTO `post` (`name`, `description`, `excerpt`, `active`, `created_date`, `category_id`, `id`, `thumbnail`) VALUES
('Building Models in Flask and GraphQL', '<p>Welcome to Part 3 of this mulit-part series. In this part of the series, we&rsquo;re going to be looking at how to write our Models for our database, as well as our schemas and resolver functions for GraphQL.</p>\r\n<p>In the first two parts of the series, we discussed how to set up our flask backend api, how to connect it to a postgres database, and how to structure our files for an evolving application using an application factory.</p>\r\n<blockquote>\r\n<p>As a reminder, we will need to have the following packages installed for this portion of the tutorial:<br><code>pip install flask flask_sqlalchemy flask-graphql graphene</code></p>\r\n</blockquote>\r\n<p>I&rsquo;ve covered flask and flask_sqlalchemy in part one. We will be using flask-graphql and graphene in this part of the tutorial. I was using&nbsp;<code>Flask-GraphQL==2.0.1</code>&nbsp;and&nbsp;<code>graphene==2.1.9</code>&nbsp;at the time this article was written.</p>\r\n<p>Let&rsquo;s jump right in!</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#our-first-model\" name=\"our-first-model\"></a>OUR FIRST MODEL</h3>\r\n<p><em>Findr / backend / models.py:</em></p>\r\n<p>In our models.py file, let&rsquo;s start with the following lines of code:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">backend</span> <span class=\"kn\">import</span> <span class=\"n\">db</span>\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\r\n   <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s\">\'users\'</span>\r\n   <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n   <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span>\r\n       <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">),</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\r\n       <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">\"&lt;User </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">email</span><span class=\"si\">}</span><span class=\"s\"> &gt;\"</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Let&rsquo;s break apart what&rsquo;s happening here.</p>\r\n<p>First we have to import our&nbsp;<em>SQLAlchemy</em>&nbsp;that we initiated as&nbsp;<em>db</em>&nbsp;in our application factory (See previous article). Then we create a User Class that extends SQLAlchemy&rsquo;s Model class. We created a name for our table using the double underscore method for tablename. We created a unique ID for each user that we created by adding&nbsp;<code>primary_key</code>&nbsp;to that Column. We created an email address column as well, and said that it needs to be unique, as two users can&rsquo;t have the same email address. Then finally, we used the double underscore&nbsp;<em>repr</em>&nbsp;method so that when we try to print our user in the terminal, it&rsquo;ll display something legible. Also, as you may have noticed, we are using the&nbsp;<em>db.Column, db.Integer, and db.String</em>&nbsp;methods from SQLAlchemy. There are a few others that we will use throughout this, but also feel free to check the&nbsp;<a href=\"https://flask-sqlalchemy.palletsprojects.com/en/2.x/\">documentation</a>&nbsp;. It&rsquo;s always a good idea to look through the documentation of a technology you are learning!</p>\r\n<p>So, now we have built our first model! Our database needs to be updated and let it know that our new model exists so that we can start adding users to our database. Open up your terminal and make sure you are in the correct directory&nbsp;<em>~/Documents/Development/Findr</em>&nbsp;. Also, we want to make sure that our&nbsp;<em>virtual environment is active!</em>&nbsp;We can access it by typing&nbsp;<code>source flaskenv/bin/activate</code>&nbsp;in our terminal. One we are ready, we can start making our&nbsp;<em>migrations</em>&nbsp;for our database models.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#making-database-migrations\" name=\"making-database-migrations\"></a>MAKING DATABASE MIGRATIONS</h3>\r\n<p>We are going to need another library to help us out here. Let&rsquo;s install&nbsp;<em>Flask-Migrate.</em><br><code>python3 -m pip install flask-migrate</code></p>\r\n<p>Also, in our&nbsp;<em>app.py</em>&nbsp;file in the root directory, we want to make sure we add the following lines of code if we don&rsquo;t have them already:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask_migrate</span> <span class=\"kn\">import</span> <span class=\"n\">Migrate</span>\r\n\r\n<span class=\"c1\"># &hellip;\r\n</span><span class=\"n\">migrate</span> <span class=\"o\">=</span> <span class=\"n\">Migrate</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span><span class=\"n\">db</span><span class=\"p\">)</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Now let&rsquo;s start making our migrations. In our terminal, we will initialize our database for migrations:<br><code>flask db init</code></p>\r\n<p>This command creates a&nbsp;<em>migrations</em>&nbsp;directory, where all our migration scripts will be kept. In order to make our first migrations script we will run the following command:<br><code>flask db migrate -m &ldquo;inital migration&rdquo;</code></p>\r\n<p>If we take a look at our files, we should see a&nbsp;<em>migrations</em>&nbsp;directory was added and inside of that directory is a subdirectory called&nbsp;<em>versions</em>. This is where each of the scripts are stored as we make migrations. These are important because they allow us to&nbsp;<strong>upgrade</strong>&nbsp;or&nbsp;<strong>downgrade</strong>&nbsp;our migrations &ndash; meaning we can move forward with a migration or we can backtrack if something went wrong or we don&rsquo;t want to make that change.</p>\r\n<p>Let&rsquo;s open up the migrations directory and look inside the versions subdirectory. There should be just a single file for now, with a name in a hexadecimal code format &ndash; a bunch of letters and numbers. Open that file and take a look. You will see two functions:&nbsp;<code>def upgrade( )</code>&nbsp;and&nbsp;<code>def downgrade( )</code>&nbsp;which are used to move forward with the migration or resort back to the state it was in before we ran the&nbsp;<code>flask db migrate</code>&nbsp;command. Since we just made one our first migration nothing should be wrong, so let&rsquo;s go ahead and upgrade with the following command:<br><code>flask db upgrade</code></p>\r\n<p>Anytime we want to add more migrations, we should always follow this procedure:<br>Make the necessary changes in the database model.<br>Generate a migration with the&nbsp;<code>flask db migrate</code>&nbsp;command.<br>Review the generated migration script and correct it if it has any inaccuracies.<br>Apply the changes to the database with the&nbsp;<code>flask db upgrade</code>&nbsp;command.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#adding-our-first-user\" name=\"adding-our-first-user\"></a>ADDING OUR FIRST USER</h3>\r\n<p>It&rsquo;s time to actually get some data in that database now!</p>\r\n<p>Let&rsquo;s go to our terminal and open up the&nbsp;<em>flask shell</em>&nbsp;for our application by entering the following:<br><code>flask shell</code></p>\r\n<p>Once we are inside the flask shell, we will want to enter the following:<br><code>from app import db, User</code><br><code>user_brandon = User(email=&rsquo;myemail@gmail.com&rsquo;)</code><br><code>db.session.add(user_brandon)</code><br><code>db.session.commit( )</code></p>\r\n<p>So, we imported our database and our User Model from our application factory, created a user with an email address, added that user to our session, then committed it to the database. Pretty straight forward! We won&rsquo;t have to do this ourselves for every user that is created, eventually we will create a function that will add the new users to the database for us through GraphQL.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#additional-models\" name=\"additional-models\"></a>ADDITIONAL MODELS</h3>\r\n<p>Before we get started on the GraphQL portion of this tutorial, let&rsquo;s add just a bit more complexity to our models so we can really get a good understanding of how GraphQL works.</p>\r\n<p>Let&rsquo;s make our models.py file look like the following:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">backend</span> <span class=\"kn\">import</span> <span class=\"n\">db</span>\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\r\n   <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s\">\'users\'</span>\r\n   <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n   <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span>\r\n       <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">),</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"c1\">#THIS IS NEW BELOW\r\n</span>   <span class=\"n\">profile_id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span>\r\n       <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s\">\'profiles.id\'</span><span class=\"p\">))</span>\r\n   <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">relationship</span><span class=\"p\">(</span>\r\n       <span class=\"s\">\"Profile\"</span><span class=\"p\">,</span> <span class=\"n\">backref</span><span class=\"o\">=</span><span class=\"s\">\'user\'</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\r\n       <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">\"&lt;User </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">email</span><span class=\"si\">}</span><span class=\"s\"> &gt;\"</span>\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">Profile</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\r\n   <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s\">\'profiles\'</span>\r\n   <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n   <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">))</span>\r\n   <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">))</span>\r\n   <span class=\"n\">skills</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s\">\"Skill\"</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\r\n       <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">\"&lt;Profile </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span> <span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">last_name</span><span class=\"si\">}</span><span class=\"s\">: #</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> &gt;\"</span>\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">Skill</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\r\n   <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s\">\'skills\'</span>\r\n   <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n   <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\r\n                    <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\r\n   <span class=\"n\">profile_id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span>\r\n       <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s\">\'profiles.id\'</span><span class=\"p\">))</span>\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\r\n       <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">\"&lt;Skill </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> &gt;\"</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Let&rsquo;s break this apart. We added two new models:&nbsp;<em>Profile</em>&nbsp;and&nbsp;<em>Skill</em>. So every profile, will have a user that is attached it &ndash; that is where the extra two lines in the&nbsp;<em>User</em>&nbsp;model come from:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"n\">profile_id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s\">\'profiles.id\'</span><span class=\"p\">))</span>\r\n<span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s\">\"Profile\"</span><span class=\"p\">,</span> <span class=\"n\">backref</span><span class=\"o\">=</span><span class=\"s\">\'user\'</span><span class=\"p\">)</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We are creating a&nbsp;<em>Many-to-One</em>&nbsp;relationship in our database. There are many users, each of which has a profile. We create a&nbsp;<em>ForeignKey</em>&nbsp;that tells us the exact ID of the profile that user has. Also, we let the database know that there is a relationship that we can access now by calling&nbsp;<code>User.profile</code>&nbsp;to get information about that profile.</p>\r\n<p>For more information on database relationships, check out the SQLAlchemy&nbsp;<a href=\"https://docs.sqlalchemy.org/en/14/orm/basic_relationships.html\">documentation</a>&nbsp;about Basic Relationship Patterns.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#setting-up-graphql\" name=\"setting-up-graphql\"></a>SETTING UP GRAPHQL</h3>\r\n<p>If you&rsquo;re interested in some more information about why to use GraphQL instead of a&nbsp;<em>REST API</em>, check out this&nbsp;<a href=\"https://www.apollographql.com/blog/graphql/basics/why-use-graphql/\">article</a>.</p>\r\n<p>Time to set up our application to handle our GraphQL!</p>\r\n<p>First we need to go to our&nbsp;<code>backend / __init__.py file</code>&nbsp;where we created our application factory, and add the following lines of code:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">flask_sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemy</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\r\n\r\n<span class=\"c1\">#THIS LINE IS NEW\r\n</span><span class=\"kn\">from</span> <span class=\"nn\">flask_graphql</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLView</span>\r\n\r\n\r\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">SQLAlchemy</span><span class=\"p\">()</span>\r\n\r\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">(</span><span class=\"n\">config_name</span><span class=\"p\">):</span>\r\n   <span class=\"err\">&hellip;</span>\r\n\r\n   <span class=\"kn\">from</span> <span class=\"nn\">.schema</span> <span class=\"kn\">import</span> <span class=\"n\">schema</span>\r\n\r\n   <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">add_url_rule</span><span class=\"p\">(</span>\r\n       <span class=\"s\">\'/graphql\'</span><span class=\"p\">,</span>\r\n       <span class=\"n\">view_func</span><span class=\"o\">=</span><span class=\"n\">GraphQLView</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span>\r\n           <span class=\"s\">\'graphql\'</span><span class=\"p\">,</span>\r\n           <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">,</span>\r\n           <span class=\"n\">graphiql</span><span class=\"o\">=</span><span class=\"bp\">True</span>  <span class=\"c1\"># for having the GraphiQL interface\r\n</span>       <span class=\"p\">)</span>\r\n   <span class=\"p\">)</span>\r\n\r\n   <span class=\"err\">&hellip;</span>\r\n\r\n   <span class=\"k\">return</span> <span class=\"n\">app</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We imported our schema from our schema.py file, but we haven&rsquo;t created that yet so we will need to do that next! The rest of the code allows us to use GraphQL as a view function so the frontend can make the call to the backend and talk to GraphQL directly. We also set&nbsp;<code>graphiql=True</code>&nbsp;so we can use the grapgiQL interface that will let us see and practice using our queries &ndash; more on this later.</p>\r\n<p>Next, let&rsquo;s open up our&nbsp;<em>backend/schema.py</em>&nbsp;file. This is where our GraphQL schema will live. Schemas are an essential part of a GraphQL server implementation. Our schema is going to be made up of two components:&nbsp;<em>the queries and the mutations</em>.&nbsp;<strong>Queries</strong>&nbsp;are what we use to call the data that we are looking for.&nbsp;<strong>Mutations</strong>&nbsp;are used to create new data or edit existing data. For now, we&rsquo;ll just focus on the queries portion.</p>\r\n<p>Let&rsquo;s write the following code:</p>\r\n<p><em>Findr / backend / schema.py</em></p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\r\n\r\n<span class=\"kn\">from</span> <span class=\"nn\">.graphql.query</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\r\n\r\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Again, you&rsquo;ll notice that we made a call to yet another file, namely the&nbsp;<em>query.py</em>&nbsp;file. We use this separate schema file as a way to stay organized. Eventually we will also add our mutations to this file as well, so it is important to have all of our schema information in one location. This helps the app scale well for future changes.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#graphql-queries\" name=\"graphql-queries\"></a>GRAPHQL QUERIES</h3>\r\n<p>Let&rsquo;s open up our&nbsp;<em>query.py</em>&nbsp;file and add the following lines of code:</p>\r\n<p><em>Findr / backend / graphql / query.py</em></p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">graphene</span> <span class=\"kn\">import</span> <span class=\"n\">relay</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemyConnectionField</span>\r\n\r\n<span class=\"kn\">from</span> <span class=\"nn\">..models</span> <span class=\"kn\">import</span> <span class=\"n\">Profile</span> <span class=\"k\">as</span> <span class=\"n\">ProfileModel</span><span class=\"p\">,</span> \\\r\n   <span class=\"n\">User</span> <span class=\"k\">as</span> <span class=\"n\">UserModel</span><span class=\"p\">,</span> \\\r\n   <span class=\"n\">Role</span> <span class=\"k\">as</span> <span class=\"n\">RoleModel</span>\r\n\r\n<span class=\"kn\">from</span> <span class=\"nn\">..graphql.objects</span> <span class=\"kn\">import</span> <span class=\"n\">UserObject</span> <span class=\"k\">as</span> <span class=\"n\">User</span><span class=\"p\">,</span> \\\r\n   <span class=\"n\">ProfileObject</span> <span class=\"k\">as</span> <span class=\"n\">Profile</span> \\\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\r\n   <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">relay</span><span class=\"p\">.</span><span class=\"n\">Node</span><span class=\"p\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\r\n\r\n   <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">List</span><span class=\"p\">(</span>\r\n       <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Int</span><span class=\"p\">())</span>\r\n\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">resolve_users</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\r\n       <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">get_query</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\r\n\r\n       <span class=\"k\">if</span> <span class=\"n\">email</span><span class=\"p\">:</span>\r\n           <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">UserModel</span><span class=\"p\">.</span><span class=\"n\">email</span> <span class=\"o\">==</span> <span class=\"n\">email</span><span class=\"p\">)</span>\r\n       <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nb\">all</span><span class=\"p\">()</span>\r\n\r\n   <span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"n\">SQLAlchemyConnectionField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">.</span><span class=\"n\">connection</span><span class=\"p\">)</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We are making some good progress here, we wrote our first&nbsp;<strong>resolver function</strong>! A&nbsp;<em>resolver</em>&nbsp;is a function that resolves a value for a type or field in a schema. Resolvers can return objects or scalars like Strings, Numbers, Booleans, etc. If an Object is returned, execution continues to the next child field. If a scalar is returned (typically at a leaf node), execution completes. If null is returned, execution stops there.</p>\r\n<p>Our&nbsp;<em>users</em>&nbsp;resolver function allows us to query all of the Users from our database, then filter by email if we choose to enter an email address in our GraphQL query (we&rsquo;ll see this shortly as well). You can notice that one of the parameters of the&nbsp;<code>resolve_users</code>&nbsp;function is&nbsp;<code>email=None</code>. This is our default value which means that if we don&rsquo;t input an email address in our query, then we will just return all users in the database. It is easy to see how we can add more filters once we start to add attributes to our User models, Profile models, etc.</p>\r\n<p>I would also like to point out the&nbsp;<code>all_users</code>&nbsp;variable and the&nbsp;<code>users</code>&nbsp;variable.&nbsp;<code>all_users</code>&nbsp;basically does the same thing as our users resolver function, however we can only search for all of the users, we cannot filter. Our&nbsp;<code>users</code>&nbsp;variable tells GraphQL that when we do a query on users, we will return the information in a list, with the ability to use the email parameter and/or the user_id parameter.</p>\r\n<p>A query of:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>{\r\n users {\r\n  email\r\n  userId\r\n  }\r\n}\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Will return something like:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>{\r\n  \"data\": {\r\n    \"users\": [\r\n      {\r\n        \"email\": \"bj.redmond19@gmail.com\",\r\n        \"userId\": 3\r\n      },\r\n      {\r\n        \"email\": \"bredmond1019@gmail.com\",\r\n        \"userId\": 2\r\n      }\r\n    ]\r\n  }\r\n}\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Let&rsquo;s finish off this by creating a&nbsp;<em>resolver function</em>&nbsp;for our profile object as well:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\r\n   <span class=\"p\">...</span>\r\n   <span class=\"n\">profiles</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">List</span><span class=\"p\">(</span>\r\n       <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">Profile</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Int</span><span class=\"p\">()</span>\r\n   <span class=\"p\">)</span>\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">resolve_profiles</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\r\n       <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Profile</span><span class=\"p\">.</span><span class=\"n\">get_query</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\r\n\r\n       <span class=\"k\">if</span> <span class=\"nb\">id</span><span class=\"p\">:</span>\r\n           <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span>\r\n               <span class=\"n\">ProfileModel</span><span class=\"p\">.</span><span class=\"nb\">id</span> <span class=\"o\">==</span> <span class=\"nb\">id</span><span class=\"p\">)</span>\r\n       <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nb\">all</span><span class=\"p\">()</span>\r\n    <span class=\"err\">&hellip;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We applied the same principles here as for the users.</p>\r\n<p>We&rsquo;re almost ready to test our first query. We just have one more piece to the puzzle &ndash; our&nbsp;<strong>GraphQL Objects</strong>. If you noticed in the code above, we imported things from two different files. One was our&nbsp;<em>models.py</em>&nbsp;file, which we&rsquo;ve built and talked about already. The other was a&nbsp;<em>objects.py</em>&nbsp;file that we still need to create.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#graphql-objects\" name=\"graphql-objects\"></a>GRAPHQL OBJECTS</h3>\r\n<p>Let&rsquo;s open up our&nbsp;<em>objects.py</em>&nbsp;file.</p>\r\n<p><em>Findr / backend / graphql / object.py</em></p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">graphene</span> <span class=\"kn\">import</span> <span class=\"n\">relay</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemyObjectType</span>\r\n\r\n<span class=\"kn\">from</span> <span class=\"nn\">..models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span> <span class=\"k\">as</span> <span class=\"n\">UserModel</span>\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">UserObject</span><span class=\"p\">(</span><span class=\"n\">SQLAlchemyObjectType</span><span class=\"p\">):</span>\r\n   <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s\">\'id\'</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\r\n       <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">UserModel</span>\r\n       <span class=\"n\">interfaces</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">relay</span><span class=\"p\">.</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"p\">)</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Before we add the other objects to this file, let&rsquo;s discuss what we have so far. We imported our models from our&nbsp;<em>models.py</em>&nbsp;file. Then we are creating our&nbsp;<code>class UserObject</code>, which we can see extends the&nbsp;<em>SQLAlchemyObjectType</em>&nbsp;&ndash; a class provided by&nbsp;<a href=\"https://github.com/graphql-python/graphene-sqlalchemy\">graphene-sqlalchemy</a>&nbsp;to integrate SQLAlchemy and GraphQL. The&nbsp;<code>user_id</code>&nbsp;attribute tells graphene to use the id associated with the model in the database, rather than the unique id graphql provides. You don&rsquo;t need to use this attribute if you don&rsquo;t want to, I find it useful for my applications. Finally, we are classing the&nbsp;<em>inner class</em>&nbsp;<a href=\"https://docs.graphene-python.org/en/latest/types/objecttypes/#objecttype-configuration-meta-class\">Meta</a>&nbsp;that allows us to set different options. We are telling graphene_sqlalchemy to use the&nbsp;<em>UserModel</em>&nbsp;and to use the&nbsp;<a href=\"https://dev.to/augustocalaca/graphql-understanding-node-interface-33e\">Relay Node</a>.</p>\r\n<p>Now that we have a basic understanding, let&rsquo;s add some more code to this file:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">ProfileObject</span><span class=\"p\">(</span><span class=\"n\">SQLAlchemyObjectType</span><span class=\"p\">):</span>\r\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\r\n       <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ProfileModel</span>\r\n       <span class=\"n\">interface</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">relay</span><span class=\"p\">.</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"p\">)</span>\r\n\r\n   <span class=\"n\">skills</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">SkillObject</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span>\r\n   <span class=\"p\">))</span>\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">resolve_skills</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\r\n       <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">SkillObject</span><span class=\"p\">.</span><span class=\"n\">get_query</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"n\">info</span><span class=\"p\">)</span>\r\n       <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span>\r\n           <span class=\"n\">SkillModel</span><span class=\"p\">.</span><span class=\"n\">profile_id</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">)</span>\r\n       <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\r\n           <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">SkillModel</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">)</span>\r\n\r\n       <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nb\">all</span><span class=\"p\">()</span>\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">SkillObject</span><span class=\"p\">(</span><span class=\"n\">SQLAlchemyObjectType</span><span class=\"p\">):</span>\r\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\r\n       <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">SkillModel</span>\r\n       <span class=\"n\">interface</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">relay</span><span class=\"p\">.</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"p\">)</span>\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">SkillInput</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">InputObjectType</span><span class=\"p\">):</span>\r\n   <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">()</span>\r\n   <span class=\"n\">preferred_skill</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Boolean</span><span class=\"p\">()</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Similarly to our UserObject we created above, we have our&nbsp;<em>ProfileObject</em>. However, this time we added a resolver function&nbsp;<code>resolve_skills</code>&nbsp;inside of our&nbsp;<em>ProfileObject</em>. Here we are using the exact same logic as before with our&nbsp;<code>resolve_users</code>&nbsp;function we created in our&nbsp;<em>query.py</em>&nbsp;file. We put this resolver function inside of the&nbsp;<em>ProfileObject</em>&nbsp;so that we know the skills query will take place under the ProfileObject rather than in its own query. Let&rsquo;s take a look at what the GraphQL query would look like.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>{\r\n  profiles {\r\n    firstname\r\n    skills {\r\n      name\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We can see that the skills query takes place directly inside the profiles query. Notice that&nbsp;<em>profiles</em>&nbsp;is at the top of the chain of queries, just like&nbsp;<em>users</em>&nbsp;was. That&rsquo;s because the profiles resolver function was created in the queries class at the top level of our code. Hopefully now you can see how to implement hierarchical queries.</p>\r\n<p>This query would return something like:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>{\r\n  \"data\": {\r\n    \"profiles\": [\r\n      {\r\n        \"firstName\": \"Brandon\",\r\n        \"skills\": [\r\n          {\r\n            \"name\": \"GraphQL\"\r\n          },\r\n          {\r\n            \"name\": \"React\"\r\n          },\r\n          {\r\n            \"name\": \"Flask\"\r\n          }\r\n\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>A few more points to dissect from our objects.py file is that we added a&nbsp;<em>Skill</em>&nbsp;class and a&nbsp;<em>SkillInput</em>&nbsp;class. The Skill class is straight forward and follows from our User class created earlier. The SkillInput class is going to be useful in our mutations that will follow later.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#testing-our-graphql\" name=\"testing-our-graphql\"></a>TESTING OUR GRAPHQL</h3>\r\n<p>Alright! Everything is in place and we are ready to run our flask server and make our first query!</p>\r\n<p><strong>NOTE</strong>&nbsp;When I first installed graphql and graphene, I wasn&rsquo;t able to view the following link you&rsquo;re about to try. That was because I had originally installed graphene==3.0.0 and I had to make sure that I was using an earlier version. As noted in the beginning of this article, I was using&nbsp;<code>Flask-GraphQL==2.0.1</code>&nbsp;and&nbsp;<code>graphene==2.1.9</code>&nbsp;at the time this article was written. I would make sure you have those versions running or you may have to do some troubleshooting if you don&rsquo;t want to revert back to the older versions. Once you do get it running, continue to the following paragraph.</p>\r\n<p>Go ahead and go to your terminal, make sure you are in the home directory, and run&nbsp;<code>flask run</code><br>The usual response should appear and we can open up our browser and head to&nbsp;<code>http://localhost:5000/graphql</code>. Here we should see an empty GraphQL query page where we can test our queries and mutations, also just play around with it and learn!</p>\r\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ucSBSjuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ic2x9y1rukm0vbvy1zq.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ucSBSjuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ic2x9y1rukm0vbvy1zq.png\" alt=\"Image description\" width=\"880\" height=\"325\" loading=\"lazy\"></a></p>\r\n<p>So far, all we&rsquo;ve created was one&nbsp;<em>User</em>&nbsp;and added it to our database (unless you&rsquo;ve added more on your own). We can run our first query:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>{\r\n users {\r\n  email\r\n  userId\r\n  }\r\n}\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>And we should see that single user be returned on the right hand side along with the email and the userId.</p>\r\n<h3><a href=\"https://dev.to/bredmond1019/building-models-in-flask-and-graphql-30an#graphql-mutations\" name=\"graphql-mutations\"></a>GRAPHQL MUTATIONS</h3>\r\n<p>Home stretch! Mutations are the last component we&rsquo;re going to talk about in this article. After this you will have a good understanding of the fundamentals of how to use GraphQL!</p>\r\n<p>If we want to add more users, profiles, skills, etc, then we are going to need to utilize GraphQL&rsquo;s mutations. Let&rsquo;s jump right in by opening up our&nbsp;<em>mutations.py</em>&nbsp;file.</p>\r\n<p><em>Findr / backend / graphql / mutations.py</em></p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\r\n\r\n<span class=\"kn\">from</span> <span class=\"nn\">backend</span> <span class=\"kn\">import</span> <span class=\"n\">db</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">..graphql.objects</span> <span class=\"kn\">import</span> <span class=\"n\">UserObject</span> <span class=\"k\">as</span> <span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">ProfileObject</span> <span class=\"k\">as</span> <span class=\"n\">Profile</span><span class=\"p\">,</span> <span class=\"n\">SkillInput</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">..models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span> <span class=\"k\">as</span> <span class=\"n\">UserModel</span><span class=\"p\">,</span> <span class=\"n\">Profile</span> <span class=\"k\">as</span> <span class=\"n\">ProfileModel</span><span class=\"p\">,</span> <span class=\"n\">Skill</span> <span class=\"k\">as</span> <span class=\"n\">SkillModel</span>\r\n\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">UserMutation</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Mutation</span><span class=\"p\">):</span>\r\n   <span class=\"k\">class</span> <span class=\"nc\">Arguments</span><span class=\"p\">:</span>\r\n       <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">mutate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">):</span>\r\n       <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserModel</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"n\">email</span><span class=\"p\">)</span>\r\n\r\n       <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\r\n       <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\r\n\r\n       <span class=\"k\">return</span> <span class=\"n\">UserMutation</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">)</span>\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">ProfileMutation</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Mutation</span><span class=\"p\">):</span>\r\n   <span class=\"k\">class</span> <span class=\"nc\">Arguments</span><span class=\"p\">:</span>\r\n       <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n       <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n       <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n       <span class=\"n\">skills</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">SkillInput</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">Profile</span><span class=\"p\">)</span>\r\n\r\n   <span class=\"k\">def</span> <span class=\"nf\">mutate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">skills</span><span class=\"p\">):</span>\r\n       <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserModel</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\r\n\r\n       <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">ProfileModel</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"n\">last_name</span><span class=\"p\">)</span>\r\n\r\n       <span class=\"n\">skill_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">SkillModel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">input_skill</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">input_skill</span> <span class=\"ow\">in</span> <span class=\"n\">skills</span><span class=\"p\">]</span>\r\n\r\n       <span class=\"n\">profile</span><span class=\"p\">.</span><span class=\"n\">skills</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">skill_list</span><span class=\"p\">)</span>\r\n\r\n       <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"p\">)</span>\r\n\r\n       <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">profile</span>\r\n       <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\r\n\r\n       <span class=\"k\">return</span> <span class=\"n\">ProfileMutation</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">profile</span><span class=\"p\">)</span>\r\n\r\n\r\n<span class=\"k\">class</span> <span class=\"nc\">Mutation</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\r\n   <span class=\"n\">mutate_user</span> <span class=\"o\">=</span> <span class=\"n\">UserMutation</span><span class=\"p\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\r\n   <span class=\"n\">mutate_profile</span> <span class=\"o\">=</span> <span class=\"n\">ProfileMutation</span><span class=\"p\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>This looks like a lot but it&rsquo;s really not that bad. First, we import our objects and models as we&rsquo;ve done before. Then, we create two classes:&nbsp;<em>UserMutation</em>&nbsp;and&nbsp;<em>ProfileMutation</em>. Within each class there is an inner class&nbsp;<em>Arguments</em>&nbsp;which are just the parameters for the mutation that we will input through GraphQL (I&rsquo;ll demonstrate in just a bit). We tell graphene the name of the mutation field (<em>user, profile</em>) we are mutating by assigning those variables the&nbsp;<code>graphene.Field( )</code>&nbsp;values. Finally, we create a function called&nbsp;<code>mutate</code>&nbsp;that takes each of the attributes listed in the&nbsp;<em>Arguments</em>&nbsp;inner class as a parameter. We take those inputs and use them to update our models in our database with the new information and commit them to the database.</p>\r\n<p>We create a Mutation Class at the end of this file that we will need to add to our schema. Let&rsquo;s open up the&nbsp;<em>schema.py</em>&nbsp;file again.</p>\r\n<p><em>Findr / backend / schema.py</em></p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\r\n\r\n\r\n<span class=\"kn\">from</span> <span class=\"nn\">.graphql.query</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\r\n<span class=\"kn\">from</span> <span class=\"nn\">.graphql.mutations</span> <span class=\"kn\">import</span> <span class=\"n\">Mutation</span>\r\n\r\n\r\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"p\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">mutation</span><span class=\"o\">=</span><span class=\"n\">Mutation</span><span class=\"p\">)</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Import the mutations that we&rsquo;ve created and then add them to the end of the schema after our Query class we created earlier.</p>\r\n<p>Let&rsquo;s make a mutation to test that it worked. Go back to&nbsp;<code>http://localhost:5000/graphql</code>&nbsp;after making sure that your flask server is still running, otherwise run it again.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>mutation {\r\n  mutateUser(email: \"myemail@gmail.com\") {\r\n    user {\r\n      email\r\n\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Should return:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>{\r\n  \"data\": {\r\n    \"mutateUser\": {\r\n      \"user\": {\r\n        \"email\": \"myemail@gmail.com\"\r\n      }\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>One thing to note about mutations is that it also returns a query of the information you created for that user. This can be useful in your application so you don&rsquo;t have to make multiple queries for a new user, etc.</p>\r\n<p>Run a query for users and you should see the new user added to the database!</p>\r\n<p>Let&rsquo;s create a new profile as well:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>mutation {\r\n  mutateProfile(\r\n    firstName:\"Brandon\",\r\n    lastName:\"Smith\",\r\n    userId:3,\r\n    skills: [{name:\"Python\"}, {name:\"JavaScript\"}]\r\n)\r\n  {\r\n    profile {\r\n      firstName\r\n      lastName\r\n      skills {\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Here we can see where we used the&nbsp;<em>SkillInput</em>&nbsp;class from before because we added two skills in the form of a list. Check out the&nbsp;<em>objects.py</em>&nbsp;file from earlier. Also, it&rsquo;s important to match the&nbsp;<em>userId</em>&nbsp;with the correct user. Typically in your application, you will have that information already, or you will need to perform a query first to get the information.</p>\r\n<p>There we have it!</p>\r\n<p>To wrap up what we&rsquo;ve done in this article, we&rsquo;ve:</p>\r\n<ul>\r\n<li>Created Models for our database</li>\r\n<li>Created our Migrations folder to update our models</li>\r\n<li>Added users to our database from the flask shell</li>\r\n<li>Connected Flask to GraphQL</li>\r\n<li>Created GraphQL Objects, Queries, and Mutations</li>\r\n<li>Ran our own queries and mutations in graphiQL</li>\r\n</ul>\r\n<p>I hope this article was helpful. Feel free to leave comments or questions!</p>\r\n<p>The next part of the series will be on creating a&nbsp;<em>React App</em>&nbsp;utilizing&nbsp;<em>Babbel</em>&nbsp;and&nbsp;<em>Webpack5</em>&nbsp;instead of just using&nbsp;<em>create react app</em>. See you there!</p>', '<p>Welcome to Part 3 of this mulit-part series. In this part of the series, we&rsquo;re going to be looking at how to write our Models for our database, as well as our schemas and resolver functions for GraphQL.</p>', 1, '2024-06-05 05:59:38', 1, 4, NULL);
INSERT INTO `post` (`name`, `description`, `excerpt`, `active`, `created_date`, `category_id`, `id`, `thumbnail`) VALUES
('Flask Data Tables - Inline Edit / Docker / Flask-RestX API', '<p>Hello Coders!</p>\r\n<p>This article presents the latest feature added to an open-source sample that showcases paginated management via&nbsp;<a href=\"https://blog.appseed.us/flask-data-tables-inline-edit-toast-notification/\">Flask and Simple-DataTables</a>&nbsp;JS Library. The latest version of the product allows&nbsp;<code>inline-edit</code>&nbsp;and items deletion via Ajax calls. The users are notified via toasts messages. The sources, published on Github under the MIT License, can be used in commercial products or eLearning activities.</p>\r\n<hr>\r\n<blockquote>\r\n<p>Thanks for reading! Content provided by&nbsp;<a href=\"https://appseed.us/\">App Generator</a></p>\r\n</blockquote>\r\n<ul>\r\n<li>👉&nbsp;<a href=\"https://github.com/app-generator/flask-volt-datatables\">Flask Datatables</a>&nbsp;- source code</li>\r\n<li>🎁 Free&nbsp;<a href=\"https://appseed.us/support\">Support</a>&nbsp;via email (issues tracker) and&nbsp;<a href=\"https://discord.gg/fZC6hup\">Discord</a></li>\r\n</ul>\r\n<hr>\r\n<h2><a href=\"https://dev.to/sm0ke/flask-data-tables-inline-edit-docker-flask-restx-api-2627#quick-start\" name=\"quick-start\"></a>✨ Quick Start</h2>\r\n<p>Once the source code is downloaded from Github (public repo), we can see the project in action using the Docker set up shipped with the product:</p>\r\n<blockquote>\r\n<p><strong>Step #1</strong>&nbsp;- Clone/download source code</p>\r\n</blockquote>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>git clone https://github.com/app-generator/flask-volt-datatables.git\r\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>flask-volt-datatables\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<hr>\r\n<blockquote>\r\n<p><strong>Step #2</strong>&nbsp;- Start in Docker</p>\r\n</blockquote>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">--build</span> \r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The Docker set up create the tables, load sample data, and starts the app using the address&nbsp;<code>http://localhost:85</code>.</p>\r\n<hr>\r\n<p>&nbsp;</p>\r\n<div class=\"ff-container ff-ready ff-active\"><button class=\"c-btn gif-button fs-s gap-2\" type=\"button\" aria-label=\"Pause animation playback\" aria-pressed=\"false\">GIF</button><canvas class=\"ff-canvas ff-canvas-ready\" width=\"728\" height=\"364\"></canvas><img id=\"animated-0\" class=\"ff-image\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lpJ4CkoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvwczgklzyixs35pqvqb.gif\" alt=\"Flask Data Tables - Inline Edit.\" width=\"880\" height=\"440\" loading=\"lazy\" data-animated=\"true\"></div>\r\n<p>&nbsp;</p>\r\n<hr>\r\n<p>The information becomes editable at&nbsp;<code>click</code>&nbsp;and the&nbsp;<code>ENTER</code>&nbsp;will confirm the save. If the save operation is successful, the users are notified via a toast message. The same notification behavior happens when a row is deleted.</p>\r\n<hr>\r\n<h2><a href=\"https://dev.to/sm0ke/flask-data-tables-inline-edit-docker-flask-restx-api-2627#product-features\" name=\"product-features\"></a>✨ Product Features</h2>\r\n<ul>\r\n<li>👉 Backend Stack:&nbsp;<code>Flask</code>,&nbsp;<code>Flask-RestX</code>, SqlAlchemy</li>\r\n<li>👉 Frontend:&nbsp;<code>Bootstrap 5</code>, Vanilla JS,&nbsp;<strong>Simple-DataTables JS</strong></li>\r\n<li>👉 Multiple Implementations: Via Controller, API, or file loads</li>\r\n<li>👉&nbsp;<code>Inline Edit</code>&nbsp;/&nbsp;<code>Delete</code>&nbsp;via Ajax Calls</li>\r\n<li>👉&nbsp;<code>Deployment</code>:&nbsp;<strong>Docker</strong>, Nginx/Gunicorn, HEROKU.</li>\r\n</ul>\r\n<hr>\r\n<blockquote>\r\n<p><code>Thanks for reading!</code>&nbsp;For more resources, feel free to access:</p>\r\n</blockquote>\r\n<hr>\r\n<ul>\r\n<li>✨&nbsp;<a href=\"https://appseed.us/admin-dashboards/open-source\">Free Dashboards</a>&nbsp;crafted in Django,&nbsp;<code>Flask</code>, and&nbsp;<strong>React</strong></li>\r\n<li>✨&nbsp;<a href=\"https://www.admin-dashboards.com/\">Admin Dashboards</a> - a huge index with products</li>\r\n</ul>', '<p>This article presents the latest feature added to an open-source sample that showcases paginated management via&nbsp;<a href=\"https://blog.appseed.us/flask-data-tables-inline-edit-toast-notification/\">Flask and Simple-DataTables</a> JS Library.</p>', 1, '2024-06-05 06:10:22', 1, 5, 'https___dev-to-uploads.s3.amazonaws.com_uploads_articles_ttauvep5xaakwb315apt.png'),
('Flask Data Tables - Open-Source Sample', '<p>Hello Coders!</p>\r\n<p>This article presents an open-source project that provides paginated access to information using&nbsp;<strong><a href=\"https://github.com/app-generator/flask-volt-datatables\">Flask and Simple-DataTables</a></strong>, a Vanilla JS library. Information can be accessed in three different ways: loaded from database, exposed by an API, and loaded from the file system. The&nbsp;<code>sources can be downloaded from Github</code>&nbsp;(MIT License) without a registration lock and used in commercial projects or eLearning activities.</p>\r\n<hr>\r\n<blockquote>\r\n<p>Thanks for reading! Content provided by&nbsp;<a href=\"https://appseed.us/\">App Generator</a></p>\r\n</blockquote>\r\n<ul>\r\n<li>👉&nbsp;<a href=\"https://github.com/app-generator/flask-volt-datatables\">Flask Datatables</a>&nbsp;- source code</li>\r\n<li>🎁 Free&nbsp;<a href=\"https://appseed.us/support\">Support</a>&nbsp;via email (issues tracker) and&nbsp;<a href=\"https://discord.gg/fZC6hup\">Discord</a>&nbsp;(1k+ community)</li>\r\n</ul>\r\n<hr>\r\n<h2><a href=\"https://dev.to/sm0ke/flask-data-tables-open-source-sample-214m#how-it-works\" name=\"how-it-works\"></a>✨ How it works</h2>\r\n<p>The information provided in CSV format is loaded via a custom Flask CLI command and saved in the database. From this point, the app serves the information using different techniques:</p>\r\n<ul>\r\n<li>Loaded from&nbsp;<code>Data</code>&nbsp;table by a controller (route)</li>\r\n<li>Served by&nbsp;<code>/api/data</code>&nbsp;API node and consumed from JS</li>\r\n<li>Loaded without any processing from a file:\r\n<ul>\r\n<li><code>app/static/datatables/data.json</code></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<hr>\r\n<h2><a href=\"https://dev.to/sm0ke/flask-data-tables-open-source-sample-214m#project-features\" name=\"project-features\"></a>✨ Project features</h2>\r\n<ul>\r\n<li><strong>Data Tables</strong>&nbsp;managed by&nbsp;<code>Simple-DataTables</code>&nbsp;(Vanilla) JS</li>\r\n<li><code>Stack</code>:&nbsp;<strong>Flask</strong>, SqlAlchemy, Flask-Migrate, Flask-RestX</li>\r\n<li><code>Implementations</code>:\r\n<ul>\r\n<li>Loaded from&nbsp;<code>Data</code>&nbsp;table by a controller (route)</li>\r\n<li>Served by&nbsp;<code>/api/data</code>&nbsp;API node and consumed from JS</li>\r\n<li>Loaded without any processing from a file:</li>\r\n<li><code>app/static/datatables/data.json</code></li>\r\n<li><code>Search</code>&nbsp;over the data</li>\r\n</ul>\r\n</li>\r\n<li>UI Kit:&nbsp;<strong>Volt Dashboard</strong>&nbsp;(Free Version) by&nbsp;<strong>Themesberg</strong></li>\r\n<li><code>Deployment</code>:&nbsp;<strong>Docker</strong>, Gunicorn/Nginx, HEROKU</li>\r\n</ul>\r\n<hr>\r\n<h2><a href=\"https://dev.to/sm0ke/flask-data-tables-open-source-sample-214m#quick-start\" name=\"quick-start\"></a>✨ Quick Start</h2>\r\n<p>Probably the most easier way is to use the Docker set up shipped with the source code and start the project using a minimum amount of work:</p>\r\n<blockquote>\r\n<p>Get the code</p>\r\n</blockquote>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>git clone https://github.com/app-generator/flask-volt-datatables.git\r\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>flask-volt-datatables\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<blockquote>\r\n<p>Start the app in Docker</p>\r\n</blockquote>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">--build</span> \r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Visit&nbsp;<code>http://localhost:85</code>&nbsp;in your browser. The app should be up &amp; running.</p>\r\n<hr>\r\n<p>&nbsp;</p>\r\n<div class=\"ff-container ff-ready ff-active\"><button class=\"c-btn gif-button fs-s gap-2\" type=\"button\" aria-label=\"Pause animation playback\" aria-pressed=\"false\">GIF</button><canvas class=\"ff-canvas ff-canvas-ready\" width=\"728\" height=\"364\"></canvas><img id=\"animated-0\" class=\"ff-image\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cc5aO4PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap0qnfdascry5hl5zovq.gif\" alt=\"Flask Data Tables - GIF animated presentation\" width=\"880\" height=\"440\" loading=\"lazy\" data-animated=\"true\"></div>\r\n<p>&nbsp;</p>\r\n<hr>\r\n<h2>✨ Implementation</h2>\r\n<p>The input file is mirrored to the tables (model) used for persistence:</p>\r\n<blockquote>\r\n<p>Input file Sample (truncated content)</p>\r\n</blockquote>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>product_code,product_info,value,currency,type\r\nNike_Air,Nike Air More Uptempo,105,usd,transaction\r\nNike_Club,Nike Club Joggers BB,55,usd,transaction\r\nNike_Uptempo,Nike Uptempo (Gs) 415082,130,usd,transaction\r\nNike_SportSwear,Nike SportSwear Club Tee,25,usd,transaction\r\nNike Dry, Nike Dry Park VII Junior,39,usd,transaction\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<hr>\r\n<blockquote>\r\n<p>Model That saves the data</p>\r\n</blockquote>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Data</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\r\n\r\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s\">\'data\'</span>\r\n\r\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\r\n\r\n    <span class=\"n\">code</span>     <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">))</span>   <span class=\"c1\"># product code \r\n</span>    <span class=\"n\">name</span>     <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">))</span>  <span class=\"c1\"># product name\r\n</span>    <span class=\"n\">value</span>    <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">)</span>      <span class=\"c1\"># numeric\r\n</span>    <span class=\"n\">currency</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>   <span class=\"c1\"># string: usd, euro\r\n</span>    <span class=\"nb\">type</span>     <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">))</span>   <span class=\"c1\"># transaction\r\n</span>    <span class=\"n\">ts</span>       <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">utcnow</span><span class=\"p\">().</span><span class=\"n\">timestamp</span><span class=\"p\">())</span>\r\n\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<hr>\r\n<blockquote>\r\n<p>The API Node (powered by Flask-RestX)</p>\r\n</blockquote>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight python\"><code><span class=\"o\">@</span><span class=\"n\">rest_api</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s\">\'/api/data\'</span><span class=\"p\">)</span>\r\n<span class=\"k\">class</span> <span class=\"nc\">Items</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\r\n\r\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\r\n\r\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\r\n\r\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">Data</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nb\">all</span><span class=\"p\">():</span>\r\n            <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">toDICT</span><span class=\"p\">()</span> <span class=\"p\">)</span> \r\n\r\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">response_class</span><span class=\"p\">(</span>\r\n            <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span>\r\n            <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\r\n            <span class=\"n\">mimetype</span><span class=\"o\">=</span><span class=\"s\">\'application/json\'</span>\r\n        <span class=\"p\">)</span>\r\n\r\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<hr>\r\n<p>This simple project will be updated (soon) with more features:</p>\r\n<ul>\r\n<li>Inline edit</li>\r\n<li>Different Charts generated from loaded information:\r\n<ul>\r\n<li>Line, Pie and bar Charts</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<hr>\r\n<blockquote>\r\n<p><code>Thanks for reading!</code> For more resources feel free to access:</p>\r\n</blockquote>', '<p>The information provided in CSV format is loaded via a custom Flask CLI command and saved in the database. From this point, the app serves the information using different techniques:</p>', 1, '2024-06-05 06:10:22', 1, 6, 'https___dev-to-uploads.s3.amazonaws.com_uploads_articles_hins06ak8y0r60ztz12m.png'),
('Express.js Async + Sync Global Exception Handler', '<p>Hi everyone, hope you all are doing ok in the COVID-19 world.<br>Recently I\'ve been playing around with Express, and I needed to setup an error handler for my project.</p>\r\n<p>I have been searching for a way to catch all exceptions in my project, something that will work both for sync and async routes.</p>\r\n<p>To my surprise, I couldn\'t find an easy solution for it, so I had to come up with something of my own.</p>\r\n<p>Let\'s walk it through:</p>\r\n<p>first define your error handler<br>errorHandler.js:</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">handleErrors</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">headersSent</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"c1\">// more handle error logic should be inserted here.</span>\r\n\r\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\r\n        <span class=\"na\">msg</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Server Error</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\r\n    <span class=\"p\">});</span>\r\n\r\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">handleErrors</span><span class=\"p\">;</span>\r\n</code></pre>\r\n</div>\r\n<p>register your error handler (after all your routes)<br>server.js:</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Middlewares</span>\r\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">cors</span><span class=\"p\">());</span>\r\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\r\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">fileupload</span><span class=\"p\">());</span>\r\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">cookies</span><span class=\"p\">());</span>\r\n\r\n<span class=\"c1\">// Routes</span>\r\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">/</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">routes</span><span class=\"p\">);</span>\r\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">handleErrors</span><span class=\"p\">);</span> <span class=\"o\">&lt;------</span>\r\n</code></pre>\r\n</div>\r\n<p>Now we are going to do some javascript magic, we are going to leverage \"express-async-handler\" and write some of our own magic, to make the global exception handler work.</p>\r\n<p>now we are going to hook express.Router which will return a new router that will have error handling for both async/sync routes</p>\r\n<p>hookRouter.js</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">express</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\r\n<span class=\"kd\">const</span> <span class=\"nx\">originalRouterFunc</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Router</span><span class=\"p\">;</span>\r\n<span class=\"kd\">const</span> <span class=\"nx\">asyncHandler</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">express-async-handler</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\r\n\r\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">hookRouter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">function</span> <span class=\"nx\">hookAllRouteMethods</span><span class=\"p\">(</span><span class=\"nx\">router</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"kd\">const</span> <span class=\"nx\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">get</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">post</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">put</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">delete</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">options</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">head</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">all</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">use</span><span class=\"dl\">\"</span><span class=\"p\">];</span> <span class=\"c1\">// all router methods</span>\r\n        <span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">method</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\r\n            <span class=\"kd\">const</span> <span class=\"nx\">originalRouterFunc</span> <span class=\"o\">=</span> <span class=\"nx\">router</span><span class=\"p\">[</span><span class=\"nx\">method</span><span class=\"p\">];</span>\r\n            <span class=\"kd\">const</span> <span class=\"nx\">hookedRouterMethod</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">routeHandlers</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n                <span class=\"nx\">routeHandlers</span> <span class=\"o\">=</span> <span class=\"nx\">routeHandlers</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">f</span> <span class=\"o\">=&gt;</span>\r\n                    <span class=\"nx\">asyncHandler</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// async error handler</span>\r\n                        <span class=\"c1\">// sync error handler start</span>\r\n                        <span class=\"k\">try</span> <span class=\"p\">{</span>\r\n                            <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">);</span> <span class=\"c1\">// original route handler</span>\r\n                        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n                            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">hahah I caught you =)</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\r\n                            <span class=\"nx\">next</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">);</span> <span class=\"c1\">// pass exception to our error handler.</span>\r\n                        <span class=\"p\">}</span>\r\n                        <span class=\"c1\">// sync error handler end</span>\r\n                    <span class=\"p\">})</span>\r\n                <span class=\"p\">);</span>\r\n                <span class=\"nx\">originalRouterFunc</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">router</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">routeHandlers</span><span class=\"p\">]);</span>\r\n            <span class=\"p\">};</span>\r\n            <span class=\"nx\">router</span><span class=\"p\">[</span><span class=\"nx\">method</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">hookedRouterMethod</span><span class=\"p\">;</span>\r\n        <span class=\"p\">});</span>\r\n    <span class=\"p\">}</span>\r\n\r\n    <span class=\"kd\">function</span> <span class=\"nx\">hookRouterCreation</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\r\n            <span class=\"kd\">const</span> <span class=\"nx\">router</span> <span class=\"o\">=</span> <span class=\"nx\">originalRouterFunc</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">);</span>\r\n            <span class=\"nx\">hookAllRouteMethods</span><span class=\"p\">(</span><span class=\"nx\">router</span><span class=\"p\">);</span>\r\n            <span class=\"k\">return</span> <span class=\"nx\">router</span><span class=\"p\">;</span>\r\n        <span class=\"p\">};</span>\r\n    <span class=\"p\">}</span>\r\n    <span class=\"nx\">hookRouterCreation</span><span class=\"p\">();</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n</div>\r\n<p>next, we just have to hook our router at the top of server.js (or before you use routes):</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">hookRouter</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">./hookRouter</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\r\n<span class=\"nx\">hookRouter</span><span class=\"p\">();</span>\r\n</code></pre>\r\n</div>\r\n<p>That\'s it! now everytime you will use express.Router() it will have your error handler !</p>\r\n<p>Hope this was helpful for you, Also this solution is still not \'battle tested\' so I would like to hear what you guys think =).</p>', '<p>I have been searching for a way to catch all exceptions in my project, something that will work both for sync and async routes.</p>', 1, '2024-06-05 06:10:22', 2, 7, NULL);
INSERT INTO `post` (`name`, `description`, `excerpt`, `active`, `created_date`, `category_id`, `id`, `thumbnail`) VALUES
('WordPress Functions List', '<p>Create Add action</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_action\r\n */</span>\r\n\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"nv\">$hook</span><span class=\"p\">,</span> <span class=\"nv\">$function_to_add</span><span class=\"p\">,</span> <span class=\"nv\">$priority</span><span class=\"p\">,</span> <span class=\"nv\">$accepted_args</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create Add_action_google_font</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_action_google_font\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">add_google_font</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"nx\">wp_enqueue_style</span><span class=\"p\">(</span> <span class=\"s1\">\'google_font\'</span><span class=\"p\">,</span> <span class=\"s1\">\'http://fonts.googleapis.com/css?family=Pacifico\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"p\">}</span>\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'wp_enqueue_scripts\'</span><span class=\"p\">,</span> <span class=\"s1\">\'add_google_font\'</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create Add Filter</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_filter\r\n */</span>\r\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$function_to_add</span><span class=\"p\">,</span> <span class=\"nv\">$priority</span><span class=\"p\">,</span> <span class=\"nv\">$accepted_args</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create Add_admin_menu</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_admin_menu\r\n */</span>\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'admin_menu\'</span> <span class=\"p\">,</span> <span class=\"s1\">\'my_plugin_page\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">my_plugin_page</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"nx\">add_options_page</span><span class=\"p\">(</span> <span class=\"s1\">\'My Page\'</span><span class=\"p\">,</span> <span class=\"s1\">\'My Page\'</span><span class=\"p\">,</span> <span class=\"s1\">\'manage_options\'</span><span class=\"p\">,</span> <span class=\"s1\">\'my_plugin\'</span><span class=\"p\">,</span> <span class=\"s1\">\'my_plugin_page\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'admin_menu\'</span><span class=\"p\">,</span> <span class=\"s1\">\'register_my_custom_menu_page\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">register_my_custom_menu_page</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">add_menu_page</span><span class=\"p\">(</span> <span class=\"s1\">\'custom menu title\'</span><span class=\"p\">,</span> <span class=\"s1\">\'custom menu\'</span><span class=\"p\">,</span> <span class=\"s1\">\'manage_options\'</span><span class=\"p\">,</span> <span class=\"s1\">\'myplugin/myplugin-admin.php\'</span><span class=\"p\">,</span> <span class=\"s1\">\'\'</span><span class=\"p\">,</span> <span class=\"s1\">\'dashicons-admin-site\'</span><span class=\"p\">,</span> <span class=\"mi\">6</span> <span class=\"p\">);</span>\r\n<span class=\"p\">}</span>\r\n\r\n\r\n</code></pre>\r\n</div>\r\n<p><a href=\"http://codex.wordpress.org/Function_Reference/add_menu_page\">Positions for Core Menu Items</a></p>\r\n<p><a href=\"https://developer.wordpress.org/resource/dashicons/\">Dashicons</a></p>\r\n<p>Create Add_apply_filters</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_apply_filters\r\n */</span>\r\n<span class=\"c1\">// First create a function and hook it into new example hook</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">example_callback</span><span class=\"p\">(</span> <span class=\"nv\">$string</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"nv\">$new_value</span> <span class=\"o\">=</span> <span class=\"nv\">$string</span> <span class=\"o\">.</span> <span class=\"s2\">\" NEW!\"</span><span class=\"p\">;</span>\r\n    <span class=\"k\">return</span> <span class=\"nv\">$new_value</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'example_filter\'</span><span class=\"p\">,</span> <span class=\"s1\">\'example_callback\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"c1\">// Then use apply_filters in your code when you want the filter to run</span>\r\n<span class=\"k\">echo</span> <span class=\"nv\">$value</span> <span class=\"o\">=</span> <span class=\"nx\">apply_filters</span><span class=\"p\">(</span> <span class=\"s1\">\'example_filter\'</span><span class=\"p\">,</span> <span class=\"s1\">\'Default value\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"c1\">// From http://wpseek.com/function/apply_filters/</span>\r\n\r\n</code></pre>\r\n</div>\r\n<p>Create Add_body_class</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_body_class\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">custom_body_classes</span><span class=\"p\">(</span> <span class=\"nv\">$classes</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"s1\">\'post\'</span> <span class=\"o\">==</span> <span class=\"nx\">get_post_type</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"nv\">$classes</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"s2\">\"custom-class\"</span><span class=\"p\">;</span>\r\n    <span class=\"p\">}</span>   \r\n\r\n    <span class=\"k\">return</span> <span class=\"nv\">$classes</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'body_class\'</span><span class=\"p\">,</span> <span class=\"s1\">\'custom_body_classes\'</span> <span class=\"p\">);</span>\r\n\r\n</code></pre>\r\n</div>\r\n<p>Create Add_init</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_body_class\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">my_init_function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"k\">echo</span> <span class=\"nx\">current_filter</span><span class=\"p\">();</span> <span class=\"c1\">// \'init\'</span>\r\n<span class=\"p\">}</span>\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'init\'</span><span class=\"p\">,</span> <span class=\"s1\">\'my_init_function\'</span> <span class=\"p\">);</span>\r\n\r\n</code></pre>\r\n</div>\r\n<p>Create Add_do_action</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_do_action\r\n */</span>\r\n    <span class=\"nx\">do_action</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$arg</span> <span class=\"p\">);</span>\r\n\r\n\r\n    <span class=\"nx\">do_action</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$arg_a</span><span class=\"p\">,</span> <span class=\"nv\">$arg_b</span><span class=\"p\">,</span> <span class=\"nv\">$etc</span> <span class=\"p\">);</span>\r\n\r\n\r\n    <span class=\"nx\">do_action_ref_array</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$args</span> <span class=\"p\">);</span>\r\n\r\n</code></pre>\r\n</div>\r\n<p>Create Add_do_action_hooks</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create Add_do_action_hooks\r\n */</span>\r\n    <span class=\"k\">function</span> <span class=\"nf\">custom_footer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n        <span class=\"nx\">do_action</span><span class=\"p\">(</span><span class=\"s1\">\'my_footer\'</span><span class=\"p\">);</span>\r\n    <span class=\"p\">}</span>\r\n\r\n    <span class=\"k\">function</span> <span class=\"nf\">custom_footer_text</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n        <span class=\"k\">echo</span> <span class=\"s2\">\"Custom footer text\"</span><span class=\"p\">;</span>\r\n    <span class=\"p\">}</span>\r\n    <span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'my_footer\'</span><span class=\"p\">,</span> <span class=\"s1\">\'custom_footer_text\'</span> <span class=\"p\">);</span>\r\n\r\n</code></pre>\r\n</div>\r\n<p><a href=\"http://wpengineer.com/1302/define-your-own-wordpress-hooks/\">Define Your Own WordPress Action Hooks</a></p>\r\n<p>Create add_filter_excerpt_length</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create add_filter_excerpt_length\r\n */</span>\r\n <span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'excerpt_length\'</span><span class=\"p\">,</span> <span class=\"s1\">\'excerpt_length_example\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">excerpt_length_example</span><span class=\"p\">(</span> <span class=\"nv\">$words</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">return</span> <span class=\"mi\">15</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n</div>\r\n<p>Create has_action</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create has_action\r\n */</span>\r\n<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">has_action</span><span class=\"p\">(</span> <span class=\"s1\">\'init\'</span><span class=\"p\">,</span> <span class=\"s1\">\'custom_plugin_code\'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">remove_action</span><span class=\"p\">(</span> <span class=\"s1\">\'init\'</span><span class=\"p\">,</span> <span class=\"s1\">\'custom_plugin_code\'</span> <span class=\"p\">);</span>\r\n    <span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'init\'</span><span class=\"p\">,</span> <span class=\"s1\">\'my_content_code\'</span> <span class=\"p\">);</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n</div>\r\n<p>Create has_filter</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create has_filter\r\n */</span>\r\n<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">has_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'custom_plugin_filter\'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'custom_plugin_filter\'</span><span class=\"p\">,</span> <span class=\"s1\">\'my_custom_code\'</span> <span class=\"p\">);</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">has_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'the_content\'</span><span class=\"p\">,</span> <span class=\"s1\">\'custom_plugin_function\'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">remove_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'the_content\'</span><span class=\"p\">,</span> <span class=\"s1\">\'custom_plugin_function\'</span> <span class=\"p\">);</span>\r\n    <span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'the_content\'</span><span class=\"p\">,</span> <span class=\"s1\">\'my_content_code\'</span> <span class=\"p\">);</span>\r\n<span class=\"p\">}</span>\r\n\r\n</code></pre>\r\n</div>\r\n<p>Create hook_debugging_functions</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create has_filter\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">list_hooks</span><span class=\"p\">(</span> <span class=\"nv\">$filter</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"p\">){</span>\r\n    <span class=\"k\">global</span> <span class=\"nv\">$wp_filter</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nv\">$hooks</span> <span class=\"o\">=</span> <span class=\"nv\">$wp_filter</span><span class=\"p\">;</span>\r\n    <span class=\"nb\">ksort</span><span class=\"p\">(</span> <span class=\"nv\">$hooks</span> <span class=\"p\">);</span>\r\n\r\n    <span class=\"k\">foreach</span><span class=\"p\">(</span> <span class=\"nv\">$hooks</span> <span class=\"k\">as</span> <span class=\"nv\">$tag</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$hook</span> <span class=\"p\">)</span>\r\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"kc\">false</span> <span class=\"o\">===</span> <span class=\"nv\">$filter</span> <span class=\"o\">||</span> <span class=\"kc\">false</span> <span class=\"o\">!==</span> <span class=\"nb\">strpos</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$filter</span> <span class=\"p\">)</span> <span class=\"p\">)</span>\r\n            <span class=\"nx\">dump_hook</span><span class=\"p\">(</span><span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$hook</span><span class=\"p\">);</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">list_live_hooks</span><span class=\"p\">(</span> <span class=\"nv\">$hook</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"kc\">false</span> <span class=\"o\">===</span> <span class=\"nv\">$hook</span> <span class=\"p\">)</span>\r\n        <span class=\"nv\">$hook</span> <span class=\"o\">=</span> <span class=\"s1\">\'all\'</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"nv\">$hook</span><span class=\"p\">,</span> <span class=\"s1\">\'list_hook_details\'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"p\">);</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">list_hook_details</span><span class=\"p\">(</span> <span class=\"nv\">$input</span> <span class=\"o\">=</span> <span class=\"kc\">NULL</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">global</span> <span class=\"nv\">$wp_filter</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"nv\">$tag</span> <span class=\"o\">=</span> <span class=\"nx\">current_filter</span><span class=\"p\">();</span>\r\n    <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"nb\">isset</span><span class=\"p\">(</span> <span class=\"nv\">$wp_filter</span><span class=\"p\">[</span><span class=\"nv\">$tag</span><span class=\"p\">]</span> <span class=\"p\">)</span> <span class=\"p\">)</span>\r\n        <span class=\"nx\">dump_hook</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$wp_filter</span><span class=\"p\">[</span><span class=\"nv\">$tag</span><span class=\"p\">]</span> <span class=\"p\">);</span>\r\n\r\n    <span class=\"k\">return</span> <span class=\"nv\">$input</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">dump_hook</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$hook</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"nb\">ksort</span><span class=\"p\">(</span><span class=\"nv\">$hook</span><span class=\"p\">);</span>\r\n\r\n    <span class=\"k\">echo</span> <span class=\"s2\">\"&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;</span><span class=\"se\">\\t</span><span class=\"s2\">&lt;strong&gt;</span><span class=\"nv\">$tag</span><span class=\"s2\">&lt;/strong&gt;&lt;br /&gt;\"</span><span class=\"p\">;</span>\r\n\r\n    <span class=\"k\">foreach</span><span class=\"p\">(</span> <span class=\"nv\">$hook</span> <span class=\"k\">as</span> <span class=\"nv\">$priority</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$functions</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n\r\n        <span class=\"k\">echo</span> <span class=\"nv\">$priority</span><span class=\"p\">;</span>\r\n\r\n        <span class=\"k\">foreach</span><span class=\"p\">(</span> <span class=\"nv\">$functions</span> <span class=\"k\">as</span> <span class=\"nv\">$function</span> <span class=\"p\">)</span>\r\n            <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s1\">\'list_hook_details\'</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n\r\n                <span class=\"k\">echo</span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">\"</span><span class=\"p\">;</span>\r\n\r\n                <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"nb\">is_string</span><span class=\"p\">(</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">]</span> <span class=\"p\">)</span> <span class=\"p\">)</span>\r\n                    <span class=\"k\">echo</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">];</span>\r\n\r\n                <span class=\"k\">elseif</span><span class=\"p\">(</span> <span class=\"nb\">is_string</span><span class=\"p\">(</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">)</span> <span class=\"p\">)</span>\r\n                    <span class=\"k\">echo</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">.</span> <span class=\"s1\">\' -&gt; \'</span> <span class=\"o\">.</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\r\n\r\n                <span class=\"k\">elseif</span><span class=\"p\">(</span> <span class=\"nb\">is_object</span><span class=\"p\">(</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">)</span> <span class=\"p\">)</span>\r\n                    <span class=\"k\">echo</span> <span class=\"s2\">\"(object) \"</span> <span class=\"o\">.</span> <span class=\"nb\">get_class</span><span class=\"p\">(</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s1\">\' -&gt; \'</span> <span class=\"o\">.</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'function\'</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\r\n\r\n                <span class=\"k\">else</span>\r\n                    <span class=\"nb\">print_r</span><span class=\"p\">(</span><span class=\"nv\">$function</span><span class=\"p\">);</span>\r\n\r\n                <span class=\"k\">echo</span> <span class=\"s1\">\' (\'</span> <span class=\"o\">.</span> <span class=\"nv\">$function</span><span class=\"p\">[</span><span class=\"s1\">\'accepted_args\'</span><span class=\"p\">]</span> <span class=\"o\">.</span> <span class=\"s1\">\') &lt;br /&gt;\'</span><span class=\"p\">;</span>\r\n            <span class=\"p\">}</span>\r\n    <span class=\"p\">}</span>\r\n\r\n    <span class=\"k\">echo</span> <span class=\"s1\">\'&lt;/pre&gt;\'</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n\r\n</code></pre>\r\n</div>\r\n<p>Create add_filter_the_content</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create add_filter_the_content\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">only_run_in_main_loop</span><span class=\"p\">(</span> <span class=\"nv\">$content</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">is_main_query</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"p\">}</span>\r\n\r\n<span class=\"p\">}</span>\r\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'the_content\'</span><span class=\"p\">,</span> <span class=\"s1\">\'only_run_in_main_loop\'</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create list_hooked_functions</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create list_hooked_functions\r\n */</span>\r\n<span class=\"nx\">list_hooked_functions</span><span class=\"p\">();</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">list_hooked_functions</span><span class=\"p\">(</span><span class=\"nv\">$tag</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">){</span>\r\n    <span class=\"k\">global</span> <span class=\"nv\">$wp_filter</span><span class=\"p\">;</span>\r\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$tag</span><span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"nv\">$hook</span><span class=\"p\">[</span><span class=\"nv\">$tag</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"nv\">$wp_filter</span><span class=\"p\">[</span><span class=\"nv\">$tag</span><span class=\"p\">];</span>\r\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">is_array</span><span class=\"p\">(</span><span class=\"nv\">$hook</span><span class=\"p\">[</span><span class=\"nv\">$tag</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\r\n            <span class=\"nb\">trigger_error</span><span class=\"p\">(</span><span class=\"s2\">\"Nothing found for \'</span><span class=\"nv\">$tag</span><span class=\"s2\">\' hook\"</span><span class=\"p\">,</span> <span class=\"kc\">E_USER_WARNING</span><span class=\"p\">);</span>\r\n            <span class=\"k\">return</span><span class=\"p\">;</span>\r\n        <span class=\"p\">}</span>\r\n    <span class=\"p\">}</span>\r\n    <span class=\"k\">else</span> <span class=\"p\">{</span>\r\n        <span class=\"nv\">$hook</span><span class=\"o\">=</span><span class=\"nv\">$wp_filter</span><span class=\"p\">;</span>\r\n        <span class=\"nb\">ksort</span><span class=\"p\">(</span><span class=\"nv\">$hook</span><span class=\"p\">);</span>\r\n    <span class=\"p\">}</span>\r\n    <span class=\"k\">echo</span> <span class=\"s1\">\'&lt;pre&gt;\'</span><span class=\"p\">;</span>\r\n    <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$hook</span> <span class=\"k\">as</span> <span class=\"nv\">$tag</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$priority</span><span class=\"p\">){</span>\r\n        <span class=\"k\">echo</span> <span class=\"s2\">\"&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;</span><span class=\"se\">\\t</span><span class=\"s2\">&lt;strong&gt;</span><span class=\"nv\">$tag</span><span class=\"s2\">&lt;/strong&gt;&lt;br /&gt;\"</span><span class=\"p\">;</span>\r\n        <span class=\"nb\">ksort</span><span class=\"p\">(</span><span class=\"nv\">$priority</span><span class=\"p\">);</span>\r\n        <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$priority</span> <span class=\"k\">as</span> <span class=\"nv\">$priority</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$function</span><span class=\"p\">){</span>\r\n            <span class=\"k\">echo</span> <span class=\"nv\">$priority</span><span class=\"p\">;</span>\r\n            <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$function</span> <span class=\"k\">as</span> <span class=\"nv\">$name</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$properties</span><span class=\"p\">)</span> <span class=\"k\">echo</span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"nv\">$name</span><span class=\"s2\">&lt;br /&gt;\"</span><span class=\"p\">;</span>\r\n        <span class=\"p\">}</span>\r\n    <span class=\"p\">}</span>\r\n    <span class=\"k\">echo</span> <span class=\"s1\">\'&lt;/pre&gt;\'</span><span class=\"p\">;</span>\r\n    <span class=\"k\">return</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n</div>\r\n<p>Create manage_posts_columns</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create manage_posts_columns\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">manage_posts_columns_example</span><span class=\"p\">(</span> <span class=\"nv\">$columns</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n\r\n\r\n    <span class=\"nb\">unset</span><span class=\"p\">(</span> <span class=\"nv\">$columns</span><span class=\"p\">[</span><span class=\"s1\">\'author\'</span><span class=\"p\">]</span> <span class=\"p\">);</span>    \r\n    <span class=\"nb\">unset</span><span class=\"p\">(</span> <span class=\"nv\">$columns</span><span class=\"p\">[</span><span class=\"s1\">\'categories\'</span><span class=\"p\">]</span> <span class=\"p\">);</span>\r\n    <span class=\"nb\">unset</span><span class=\"p\">(</span> <span class=\"nv\">$columns</span><span class=\"p\">[</span><span class=\"s1\">\'tags\'</span><span class=\"p\">]</span> <span class=\"p\">);</span>\r\n    <span class=\"nb\">unset</span><span class=\"p\">(</span> <span class=\"nv\">$columns</span><span class=\"p\">[</span><span class=\"s1\">\'comments\'</span><span class=\"p\">]</span> <span class=\"p\">);</span>\r\n    <span class=\"k\">return</span> <span class=\"nv\">$columns</span><span class=\"p\">;</span>\r\n\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'manage_posts_columns\'</span><span class=\"p\">,</span> <span class=\"s1\">\'manage_posts_columns_example\'</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create register_menu</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create register_menu\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">register_my_menus</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">register_nav_menus</span><span class=\"p\">(</span>\r\n    <span class=\"k\">array</span><span class=\"p\">(</span>\r\n      <span class=\"s1\">\'footer_menu\'</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">__</span><span class=\"p\">(</span> <span class=\"s1\">\'Footer Menu\'</span><span class=\"p\">,</span> <span class=\"s1\">\'mytheme\'</span> <span class=\"p\">)</span>      \r\n    <span class=\"p\">)</span>\r\n  <span class=\"p\">);</span>\r\n<span class=\"p\">}</span>\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'init\'</span><span class=\"p\">,</span> <span class=\"s1\">\'register_my_menus\'</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create remove_action</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create remove_action\r\n */</span>\r\n<span class=\"nx\">remove_action</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$function_to_remove</span><span class=\"p\">,</span> <span class=\"nv\">$priority</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create remove_action</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create remove_action\r\n */</span>\r\n<span class=\"nx\">remove_action</span><span class=\"p\">(</span> <span class=\"s1\">\'wp_enqueue_scripts\'</span><span class=\"p\">,</span> <span class=\"s1\">\'add_google_font\'</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create add_filter_bulk_actions-edit-post</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create add_filter_bulk_actions-edit-post\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">my_custom_bulk_actions</span><span class=\"p\">(</span><span class=\"nv\">$actions</span><span class=\"p\">){</span>\r\n    <span class=\"nb\">var_export</span><span class=\"p\">(</span> <span class=\"nv\">$actions</span> <span class=\"p\">);</span> \r\n    <span class=\"nb\">unset</span><span class=\"p\">(</span> <span class=\"nv\">$actions</span><span class=\"p\">[</span><span class=\"s1\">\'delete\'</span><span class=\"p\">]</span> <span class=\"p\">);</span>\r\n    <span class=\"k\">return</span> <span class=\"nv\">$actions</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span><span class=\"s1\">\'bulk_actions-edit-post\'</span><span class=\"p\">,</span><span class=\"s1\">\'__return_empty_array\'</span><span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create remove_filter</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create remove_filter\r\n */</span>\r\n<span class=\"nx\">remove_filter</span><span class=\"p\">(</span> <span class=\"nv\">$tag</span><span class=\"p\">,</span> <span class=\"nv\">$function_to_remove</span><span class=\"p\">,</span> <span class=\"nv\">$priority</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p>Create widgets_init</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create widgets_init\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">create_my_widget</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"nx\">register_sidebar</span><span class=\"p\">(</span><span class=\"k\">array</span><span class=\"p\">(</span>\r\n        <span class=\"s1\">\'name\'</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">__</span><span class=\"p\">(</span> <span class=\"s1\">\'My Sidebar\'</span><span class=\"p\">,</span> <span class=\"s1\">\'mytheme\'</span> <span class=\"p\">),</span>    \r\n        <span class=\"s1\">\'id\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'my_sidebar\'</span><span class=\"p\">,</span>\r\n        <span class=\"s1\">\'description\'</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">__</span><span class=\"p\">(</span> <span class=\"s1\">\'The one and only\'</span><span class=\"p\">,</span> <span class=\"s1\">\'mytheme\'</span> <span class=\"p\">),</span>\r\n    <span class=\"p\">));</span>\r\n\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'widgets_init\'</span><span class=\"p\">,</span> <span class=\"s1\">\'create_my_widget\'</span> <span class=\"p\">);</span> \r\n</code></pre>\r\n</div>\r\n<p>Create wp_enqueue_scripts and wp_enqueue_style</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create wp_enqueue_scripts and wp_enqueue_style\r\n */</span>\r\n<span class=\"k\">function</span> <span class=\"nf\">theme_styles</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"nx\">wp_enqueue_style</span><span class=\"p\">(</span> <span class=\"s1\">\'bootstrap_css\'</span><span class=\"p\">,</span> <span class=\"nx\">get_template_directory_uri</span><span class=\"p\">()</span> <span class=\"o\">.</span> <span class=\"s1\">\'/css/bootstrap.min.css\'</span> <span class=\"p\">);</span>\r\n    <span class=\"nx\">wp_enqueue_style</span><span class=\"p\">(</span> <span class=\"s1\">\'main_css\'</span><span class=\"p\">,</span> <span class=\"nx\">get_template_directory_uri</span><span class=\"p\">()</span> <span class=\"o\">.</span> <span class=\"s1\">\'/style.css\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"p\">}</span>\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'wp_enqueue_scripts\'</span><span class=\"p\">,</span> <span class=\"s1\">\'theme_styles\'</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">theme_js</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n\r\n    <span class=\"nx\">wp_enqueue_script</span><span class=\"p\">(</span> <span class=\"s1\">\'bootstrap_js\'</span><span class=\"p\">,</span> <span class=\"nx\">get_template_directory_uri</span><span class=\"p\">()</span> <span class=\"o\">.</span> <span class=\"s1\">\'/js/bootstrap.min.js\'</span><span class=\"p\">,</span> <span class=\"k\">array</span><span class=\"p\">(</span><span class=\"s1\">\'jquery\'</span><span class=\"p\">),</span> <span class=\"s1\">\'\'</span><span class=\"p\">,</span> <span class=\"kc\">true</span> <span class=\"p\">);</span>\r\n    <span class=\"nx\">wp_enqueue_script</span><span class=\"p\">(</span> <span class=\"s1\">\'theme_js\'</span><span class=\"p\">,</span> <span class=\"nx\">get_template_directory_uri</span><span class=\"p\">()</span> <span class=\"o\">.</span> <span class=\"s1\">\'/js/theme.js\'</span><span class=\"p\">,</span> <span class=\"k\">array</span><span class=\"p\">(</span><span class=\"s1\">\'jquery\'</span><span class=\"p\">,</span> <span class=\"s1\">\'bootstrap_js\'</span><span class=\"p\">),</span> <span class=\"s1\">\'\'</span><span class=\"p\">,</span> <span class=\"kc\">true</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"p\">}</span>\r\n<span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">\'wp_enqueue_scripts\'</span><span class=\"p\">,</span> <span class=\"s1\">\'theme_js\'</span> <span class=\"p\">);</span> \r\n</code></pre>\r\n</div>\r\n<p>Create add_filter_login_redirect</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create add_filter_login_redirect\r\n */</span>\r\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'login_redirect\'</span><span class=\"p\">,</span> <span class=\"s1\">\'login_redirect_example\'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"p\">);</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">login_redirect_example</span><span class=\"p\">(</span> <span class=\"nv\">$redirect_to</span><span class=\"p\">,</span> <span class=\"nv\">$request</span><span class=\"p\">,</span> <span class=\"nv\">$user</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">global</span> <span class=\"nv\">$user</span><span class=\"p\">;</span>\r\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nb\">isset</span><span class=\"p\">(</span> <span class=\"nv\">$user</span><span class=\"o\">-&gt;</span><span class=\"na\">roles</span> <span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">is_array</span><span class=\"p\">(</span> <span class=\"nv\">$user</span><span class=\"o\">-&gt;</span><span class=\"na\">roles</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nb\">in_array</span><span class=\"p\">(</span> <span class=\"s1\">\'subscriber\'</span><span class=\"p\">,</span> <span class=\"nv\">$user</span><span class=\"o\">-&gt;</span><span class=\"na\">roles</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n            <span class=\"k\">return</span> <span class=\"nx\">home_url</span><span class=\"p\">();</span>\r\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\r\n            <span class=\"k\">return</span> <span class=\"nv\">$redirect_to</span><span class=\"p\">;</span>\r\n            <span class=\"p\">}</span>\r\n    <span class=\"p\">}</span>\r\n    <span class=\"k\">return</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n</div>\r\n<p>Create add_filter_wp_title</p>\r\n<div class=\"highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"cd\">/**\r\n * Create add_filter_wp_title\r\n */</span>\r\n\r\n<span class=\"k\">function</span> <span class=\"nf\">custom_wp_title</span><span class=\"p\">(</span> <span class=\"nv\">$title</span><span class=\"p\">,</span> <span class=\"nv\">$sep</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">global</span> <span class=\"nv\">$page</span><span class=\"p\">;</span>\r\n\r\n        <span class=\"c1\">// Add the site name.</span>\r\n\r\n    <span class=\"nv\">$title</span> <span class=\"o\">.=</span> <span class=\"nx\">get_bloginfo</span><span class=\"p\">(</span> <span class=\"s1\">\'name\'</span> <span class=\"p\">);</span>\r\n\r\n        <span class=\"c1\">// Add the site description for the home/front page.</span>\r\n\r\n    <span class=\"nv\">$site_description</span> <span class=\"o\">=</span> <span class=\"nx\">get_bloginfo</span><span class=\"p\">(</span> <span class=\"s1\">\'description\'</span><span class=\"p\">,</span> <span class=\"s1\">\'display\'</span> <span class=\"p\">);</span>\r\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nv\">$site_description</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span> <span class=\"nx\">is_home</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"nx\">is_front_page</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\r\n        <span class=\"nv\">$title</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"nv\">$title</span> <span class=\"nv\">$sep</span> <span class=\"nv\">$site_description</span><span class=\"s2\">\"</span><span class=\"p\">;</span>\r\n    <span class=\"p\">}</span> \r\n\r\n    <span class=\"k\">return</span> <span class=\"nv\">$title</span><span class=\"p\">;</span>\r\n\r\n<span class=\"p\">}</span> \r\n<span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">\'wp_title\'</span><span class=\"p\">,</span> <span class=\"s1\">\'custom_wp_title\'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"p\">);</span>\r\n</code></pre>\r\n</div>\r\n<p><a href=\"https://tommcfarlin.com/filter-wp-title/\">filter-wp-title</a></p>\r\n<p><a href=\"https://github.com/Alicannklc/wordpress-functions-list\">Repo</a></p>', '', 1, '2024-06-05 06:10:22', 3, 8, NULL);
INSERT INTO `post` (`name`, `description`, `excerpt`, `active`, `created_date`, `category_id`, `id`, `thumbnail`) VALUES
('WordPress REST API as a Back-end with React and Docker (Part 1)', '<h1>About This Project</h1>\r\n<p>About a month ago, I was faced with a challenge. At my workplace I was asked to work on a project as a single developer, responsible for the complete technical development of the entire thing, and what&rsquo;s even better, I was offered a very strict schedule. A little under a month in fact. At first it seemed like a stretch, but it was definitely doable, so I complied. Taking into account the scope of the project and the amount of time I had on my hands I made some snappy decisions about the technologies I was going to use. Here are some of the features I needed to implement:</p>\r\n<ul>\r\n<li>CRUD capability on several different types of content (news, media, promotions, etc).</li>\r\n<li>Multimedia uploads, including files and pictures.</li>\r\n<li>Different permission groups of users.</li>\r\n<li>User submitted responses to posts.</li>\r\n<li>Multi-platform front-end, including a special use case, where the whole software had to behave completely differently on Smart TVs.</li>\r\n</ul>\r\n<p>Those all lead to the conclusion, that what was needed is a basic CMS (Content Management System). There are multiple routes to take in this situation, like picking a huge, popular CMS, written by a team of experienced developers, or looking at some cool open source Flavour of the Month style project, usually written in Node JS and Express, or thirdly I could have gone and created my own from scratch, using one of the many languages and back-end technologies that I am proficient in, like Java with Spring Boot, or GoLang and the Gin framework. Assuming that the scope will stay relatively similar to the initial proposal and realising I did not really have time to learn a new CMS or develop my own from scratch, I decided to go the first route and pick the dreaded WordPress platform. I already could do most of what I needed with little to no modifications, it has great support, official forms, a massive community, a&nbsp;<a href=\"https://w3techs.com/technologies/overview/content_management/all\">third of the Internet using it</a>, and last but not least a convenient RESTful API, covering most, if not all functionality, meaning I could take advantage of the admin user interface, while being able to deliver something cool and unique to the people using the front-facing interfaces.</p>\r\n<p>So I needed to decide on two more things. What should I do about the front-end and how should I ensure that my development process stays smooth throughout? The answer to the first one was&nbsp;<a href=\"https://www.reactjs.org/\">React</a>&nbsp;because I ❤️ React, and have been an absolute fan for a long while now, which means I can deliver applications using React as a base very quickly. In terms of development environment I decided to go with&nbsp;<a href=\"https://www.docker.com/\">Docker</a>. Again, I absolutely 🐋 the simplicity Docker provides, while also reducing overhead by allowing for development and deployment, using the same exact stack.</p>\r\n<p>In my original project I could not take advantage of Docker once development was done, due to the customer&rsquo;s reluctancy to deploy with it.</p>\r\n<h2><a href=\"https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-1-2gb2#in-this-part\" name=\"in-this-part\"></a>In This Part</h2>\r\n<p>We will get as far as installing WordPress using a portable Docker Compose setup and looking at how to handle modifications to our installation, being able to modify each file we need.</p>\r\n<h2><a href=\"https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-1-2gb2#first-steps\" name=\"first-steps\"></a>First Steps</h2>\r\n<p>First of all I wanted to set up the development environment, before I took a look at any code. The current version of WordPress requires PHP version 5.4, but it is no longer supported, so PHP v7+ is probably a better choice to go with. I also needed to have a MySQL-compliant database, like MySQL Server or MariaDB. To keep things in sync and working within the same virtual network, I decided to use&nbsp;<a href=\"https://docs.docker.com/compose/\">Docker Compose</a>, which is a nice little utility built on top of Docker, that helps organising and connecting images that are related. Compose uses YAML as the format of its configuration, which is sort of easy to work with and is pretty clear on what it does. It follows Docker&rsquo;s naming convention for most things. At this point I also decided to work with the basic&nbsp;<code>wordpress</code>&nbsp;image from DockerHub, which is a community where you can get a ton of pre-made images from. For the data image I picked the&nbsp;<code>mysql</code>&nbsp;image.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight yaml\"><code><span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s1\">\'</span><span class=\"s\">3\'</span>\r\n\r\n<span class=\"na\">services</span><span class=\"pi\">:</span>\r\n  <span class=\"na\">db</span><span class=\"pi\">:</span>\r\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">mysql:5.7</span>\r\n    <span class=\"na\">volumes</span><span class=\"pi\">:</span>\r\n      <span class=\"pi\">-</span> <span class=\"s\">./db_data:/var/lib/mysql</span>\r\n    <span class=\"na\">restart</span><span class=\"pi\">:</span> <span class=\"s\">always</span>\r\n    <span class=\"na\">environment</span><span class=\"pi\">:</span>\r\n      <span class=\"na\">MYSQL_ROOT_PASSWORD</span><span class=\"pi\">:</span> <span class=\"s\">wordpress123</span>\r\n      <span class=\"na\">MYSQL_DATABASE</span><span class=\"pi\">:</span> <span class=\"s\">wordpress</span>\r\n      <span class=\"na\">MYSQL_USER</span><span class=\"pi\">:</span> <span class=\"s\">wordpress</span>\r\n      <span class=\"na\">MYSQL_PASSWORD</span><span class=\"pi\">:</span> <span class=\"s\">wordpress</span>\r\n\r\n  <span class=\"na\">wordpress</span><span class=\"pi\">:</span>\r\n    <span class=\"na\">depends_on</span><span class=\"pi\">:</span>\r\n      <span class=\"pi\">-</span> <span class=\"s\">db</span>\r\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">wordpress:latest</span>\r\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\r\n      <span class=\"pi\">-</span> <span class=\"s1\">\'</span><span class=\"s\">80:80\'</span>\r\n    <span class=\"na\">restart</span><span class=\"pi\">:</span> <span class=\"s\">always</span>\r\n    <span class=\"na\">environment</span><span class=\"pi\">:</span>\r\n      <span class=\"na\">WORDPRESS_DB_HOST</span><span class=\"pi\">:</span> <span class=\"s\">db:3306</span>\r\n      <span class=\"na\">WORDPRESS_DB_USER</span><span class=\"pi\">:</span> <span class=\"s\">wordpress</span>\r\n      <span class=\"na\">WORDPRESS_DB_PASSWORD</span><span class=\"pi\">:</span> <span class=\"s\">wordpress</span>\r\n<span class=\"na\">volumes</span><span class=\"pi\">:</span> <span class=\"na\">db_data</span><span class=\"pi\">:</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>In this config file, we see that we are deploying two services:&nbsp;<code>db</code>&nbsp;and&nbsp;<code>wordpress</code>. The important thing to note here is the way Docker Compose wires together the virtual network. It provides domains to the services with the names of the service, for example out MySQL Server will be available at&nbsp;<code>mysql://db:3306</code>, while our WordPress would be reachable at&nbsp;<code>http://wordpress</code>. Of course outside of the network (which is where we actually are) we can&rsquo;t see that, so what we need to do is what you&rsquo;d do with Docker: expose port&nbsp;<code>80</code>, which is taken by the Apache running within the container to some of our ports, in this example port&nbsp;<code>8000</code>. This means that we&rsquo;ll be able to see our WordPress installation at&nbsp;<code>http://localhost:8000</code>&nbsp;or in cases where Docker is running within a container (like on Windows), we need to use our&nbsp;<code>$DOCKER_IP</code>&nbsp;variable or something similar.</p>\r\n<p>Another thing to note is that the&nbsp;<code>db</code>&nbsp;image has its working folder mapped to a local folder called&nbsp;<code>db_data</code>. For this to work, we need to create this folder. If there is no such folder, nothing will happen, however it is handy to have all development data saved locally also.</p>\r\n<p>We can start up this configuration by entering the following command in the directory, where our&nbsp;<code>docker-compose.yml</code>&nbsp;is saved.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code>docker-compose up <span class=\"nt\">-d</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p><em>The -d flag is handy as it will start the containers in detached mode, meaning we can get log output by using docker-compose logs.</em></p>\r\n<p>Upon visiting&nbsp;<code>http://localhost:8000</code>, we should see the following screen:</p>\r\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--M1O8Sa6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj6x2k6myxb93ig0jxz4.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--M1O8Sa6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj6x2k6myxb93ig0jxz4.png\" alt=\"Image description\" width=\"880\" height=\"840\" loading=\"lazy\"></a><br><em>Screenshot of WordPress install screen</em></p>\r\n<p>What&rsquo;s more, upon completing the famous 5 second install process, whereby giving our credentials, such as username and password both set to&nbsp;<code>admin</code>&nbsp;(please do not do this in actual production builds), we should be greeted with the below screen upon logging in. Note that if you&rsquo;ve mounted the volume&nbsp;<code>db_data</code>&nbsp;to an actual folder, you should see MySQL server spitting out files related to our new WordPress installation. This is cool because you can just bundle this up at a later point and install it under an actual instance of MySQL Server or another Docker image and it will work fine with the same WordPress configurations.</p>\r\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2tboMaFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0mltn3u6qsm2s40yuze.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2tboMaFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0mltn3u6qsm2s40yuze.png\" alt=\"Image description\" width=\"880\" height=\"840\" loading=\"lazy\"></a><br><em>Screenshot of WordPress admin screen</em></p>\r\n<h2><a href=\"https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-1-2gb2#making-the-wordpress-installation-configurable\" name=\"making-the-wordpress-installation-configurable\"></a>Making the WordPress Installation Configurable</h2>\r\n<p>The next thing we should probably do is making it so that we can actually change the files that are served via WordPress. This helps because we do want to touch our&nbsp;<code>functions.php</code>&nbsp;for our own theme, to add custom post types later on.</p>\r\n<p>For this all we need to do is add the following two lines to our&nbsp;<code>docker-compose.yml</code>:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight yaml\"><code><span class=\"na\">volumes</span><span class=\"pi\">:</span>\r\n  <span class=\"pi\">-</span> <span class=\"s\">./wordpress:/var/www/html</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Like we did with the MySQL service, we also need to add this directory to our workspace, otherwise this will not work.</p>\r\n<p>Refer to the&nbsp;<code>db</code>&nbsp;service config if you&rsquo;re unsure which lines to put this on. We also need to restart our Docker Compose network for these changes to take effect. To do that, run:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code>docker-compose down<span class=\"p\">;</span> docker-compose up <span class=\"nt\">-d</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Note that there is a&nbsp;<code>docker-compose restart</code>, but that will not reload configurations sadly.</p>\r\n<p>A perk of this approach is that because WordPress runs on PHP, which is a run-time evaluated per-invokation scripting language, we can simply update any of the PHP files and press refresh in our browser for immediate effect. This is actually what we&rsquo;ll be taking advantage of in the next part, where we&rsquo;ll install plugins, slim down the overall installation size and also start our React project with the REST API.</p>', '', 1, '2024-06-05 06:10:22', 3, 9, NULL),
('WordPress REST API as a Back-end with React and Docker (Part 2)', '<div id=\"article-body\" class=\"crayons-article__body text-styles spec__body\" data-article-id=\"913461\">\r\n<p>In&nbsp;<a href=\"https://./wordpress-rest-api-as-a-backend-with-react-and-docker-part-1\">part 1 of this series</a>&nbsp;I taught you how to get up and running with WordPress and Docker. In this one we\'ll see how we can integrate React with WordPress\' RESTful API to be used as a back-end solution for our CRUD project. Let\'s dive in.</p>\r\n<h2><a href=\"https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-2-1lbe#creating-the-react-app\" name=\"creating-the-react-app\"></a>Creating the ⚛️ React App</h2>\r\n<p>To create a new React single-page application, let\'s use&nbsp;<a href=\"https://github.com/facebook/create-react-app\"><code>create-react-app</code></a>, which is what\'s recommended in the official docs and is an opinionated, batteries included tool to quickly scaffold React applications. You can add it globally with the usual&nbsp;<code>yarn global add create-react-app</code>&nbsp;or&nbsp;<code>npm install -G create-react-app</code>, but I don\'t want it to stay on my computer since I will only use the command once per project, so I\'ll use&nbsp;<a href=\"https://github.com/zkat/npx\"><code>npx</code></a>&nbsp;to execute the binary from a temporary location and then remove it.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code>npx create-react-app wordpress-react\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Once we set up our project, we\'ll&nbsp;<code>cd wordpress-react</code>&nbsp;and use&nbsp;<code>yarn start</code>&nbsp;to get the live development server with Webpack rolling. I do not mean for this to be an introduction to React. The documentation and the countless tutorials available online will be more than enough to get you started. I\'ll show how to integrate the WP REST API with&nbsp;<code>react-router</code>&nbsp;and I\'ll take this chance to make use of the new Context API of&nbsp;<strong>React 16.3+</strong>.</p>\r\n<p>Let\'s add dependencies and get working on the app:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code>yarn add react-router react-router-dom\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<h2><a href=\"https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-2-1lbe#project-structure\" name=\"project-structure\"></a>Project Structure</h2>\r\n<p>The first thing I always do to get my head around to working with a new project is setting up the directory structure. For this project we\'ll use the new Context API for state management and React Router v4 for routing, so knowing that we\'ll come up with the following structure to support our project:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight shell\"><code>- src\r\n  | - components\r\n  | - containers\r\n  | <span class=\"o\">&gt;</span> Store.js\r\n  | <span class=\"o\">&gt;</span> App.js\r\n  | <span class=\"o\">&gt;</span> index.js\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We\'ll use two types of components: presentational components, which will have all the styles and container components, which will handle interaction with Context via lifecycle methods and will pass those down to presentational components.</p>\r\n<p>Let\'s clear up our&nbsp;<code>App.js</code>:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight jsx\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">\'</span><span class=\"s1\">react</span><span class=\"dl\">\'</span><span class=\"p\">;</span>\r\n\r\n<span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>Hello, WordPress!<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;;</span>\r\n\r\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We\'ll revisit this one later when we add store and routes.</p>\r\n<h2><a href=\"https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-2-1lbe#extending-development-environment\" name=\"extending-development-environment\"></a>Extending Development Environment</h2>\r\n<p>Next up we\'ll add the final service to our&nbsp;<code>docker-compose.yml</code>, which will tell Docker to add our front-end to the network. The&nbsp;<code>npm run start</code>&nbsp;process will run inside a Docker container, but we\'ll mount our source directory as a volume, which will mean that any change we make during development will trigger the watcher inside the container and will reload the app just as if it were running on the host machine.</p>\r\n<p>As of now, I am keeping everything inside the root project directory, that&nbsp;<code>create-react-app</code>&nbsp;created for us. Let\'s add this new service to the&nbsp;<code>docker-compose.yml</code>:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight yaml\"><code><span class=\"na\">app</span><span class=\"pi\">:</span>\r\n  <span class=\"na\">depends_on</span><span class=\"pi\">:</span>\r\n    <span class=\"pi\">-</span> <span class=\"s\">wordpress</span>\r\n  <span class=\"na\">build</span><span class=\"pi\">:</span> <span class=\"s\">.</span>\r\n  <span class=\"na\">ports</span><span class=\"pi\">:</span>\r\n    <span class=\"pi\">-</span> <span class=\"s1\">\'</span><span class=\"s\">3000:3000\'</span>\r\n  <span class=\"na\">volumes</span><span class=\"pi\">:</span>\r\n    <span class=\"pi\">-</span> <span class=\"s1\">\'</span><span class=\"s\">.:/app\'</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>You may notice the line</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight yaml\"><code><span class=\"na\">build</span><span class=\"pi\">:</span> <span class=\"s\">.</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>This tells compose to look for a&nbsp;<code>Dockerfile</code>&nbsp;in the same directory, which we do not yet have. Let\'s fix that:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight docker\"><code><span class=\"k\">FROM</span><span class=\"s\"> node:alpine</span>\r\n<span class=\"k\">RUN </span><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> /app\r\n<span class=\"k\">COPY</span><span class=\"s\"> ./package.json /app/package.json</span>\r\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span>\r\n<span class=\"k\">RUN </span>npm <span class=\"nb\">install</span>\r\n<span class=\"k\">ENTRYPOINT</span><span class=\"s\"> [ \"npm\", \"start\" ]</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We\'ll copy our&nbsp;<code>package.json</code>&nbsp;for NPM to be able to install our dependencies, before the mounting happens. This will mean that whenever we restart the container, it will not have to pull dependencies every time. One more thing we need to add in order for the React App to reach the WordPress instance is the&nbsp;<code>proxy</code>&nbsp;config field in the&nbsp;<code>package.json</code>&nbsp;file, like so:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight json\"><code><span class=\"p\">{</span>\r\n    <span class=\"err\">...</span>\r\n    <span class=\"nl\">\"proxy\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://wordpress\"</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Let\'s see what will happen inside and outside the Docker network:</p>\r\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--s71PS56N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wcab27w3bba6uemnl2r.png\"><img title=\"WordPress Diagram\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--s71PS56N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wcab27w3bba6uemnl2r.png\" alt=\"Diagram of the data flow in network\" width=\"800\" height=\"500\" loading=\"lazy\"></a></p>\r\n<p>We can still access the WordPress service too, via visiting&nbsp;<code>http://localhost</code>&nbsp;on our computers, however that is not how it can be accessed inside the network, which is the reason why we added it to a proxy config. This means that requests that should not be served with a valid URL within our application will be redirected to go to the WordPress service.</p>\r\n<h2><a href=\"https://dev.to/danielkov/wordpress-rest-api-as-a-back-end-with-react-and-docker-part-2-1lbe#setting-up-store\" name=\"setting-up-store\"></a>Setting Up Store</h2>\r\n<p>React 16.3 brought about a new Context API, which is more intuitive and in this guide it will replace Redux, which is what I initially wanted to use before the new stuff came out. The way the new API works is you have&nbsp;<code>Provider</code>&nbsp;and&nbsp;<code>Consumer</code>&nbsp;tied to each context you create. To get these two, you can fire off a call to the new&nbsp;<code>createContext</code>, which accepts a parameter, which will be the default value that can be accessed inside the context. Using context is still a way to bypass intermediate components, when passing data deep down within components, however the new API is way more intuitive and is actually easier to set up than Redux, so let\'s see how it is done.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Store.js</span>\r\n<span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">createContext</span><span class=\"p\">,</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\'</span><span class=\"s1\">react</span><span class=\"dl\">\'</span><span class=\"p\">;</span>\r\n\r\n<span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">Provider</span><span class=\"p\">,</span> <span class=\"nx\">Consumer</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">createContext</span><span class=\"p\">();</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We could just wrap the whole application insde the&nbsp;<code>&lt;Provider/&gt;</code>, however we also want to be able to retrieve data, which will manipulate context. For this we\'ll create a wrapper component, which uses the Provider and can pass down data as well as methods for data retrieval, much like&nbsp;<code>mapDispatchToProps</code>&nbsp;in&nbsp;<code>redux</code>.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight jsx\"><code><span class=\"kd\">class</span> <span class=\"nx\">Store</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n    <span class=\"na\">posts</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\r\n  <span class=\"p\">};</span>\r\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">const</span> <span class=\"p\">{</span>\r\n      <span class=\"na\">state</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">posts</span> <span class=\"p\">},</span>\r\n      <span class=\"na\">props</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">children</span> <span class=\"p\">},</span>\r\n    <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\r\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">Provider</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">{</span> <span class=\"nx\">posts</span><span class=\"p\">,</span> <span class=\"nx\">loadPosts</span> <span class=\"p\">}</span><span class=\"si\">}</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">children</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nc\">Provider</span><span class=\"p\">&gt;;</span>\r\n  <span class=\"p\">}</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We can test out how the&nbsp;<code>&lt;Consumer/&gt;</code>&nbsp;works by just initializing the state with some sample data and creating the presentational components. Inside the&nbsp;<code>containers</code>&nbsp;directory we\'ll create components that make use of the&nbsp;<code>Consumer</code>\'s&nbsp;<code>children</code>&nbsp;prop, which is a function that recieves whatever is the current&nbsp;<code>value</code>&nbsp;of the&nbsp;<code>Provider</code>.</p>\r\n<p>Let\'s add this container component:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight jsx\"><code><span class=\"c1\">// containers/PostsContainer.js</span>\r\n<span class=\"c1\">// ... imports</span>\r\n<span class=\"kd\">const</span> <span class=\"nx\">PostsContainer</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\r\n  <span class=\"p\">&lt;</span><span class=\"nc\">Consumer</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"p\">({</span> <span class=\"nx\">posts</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&lt;</span><span class=\"nc\">PostsView</span> <span class=\"na\">posts</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">posts</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nc\">Consumer</span><span class=\"p\">&gt;</span>\r\n<span class=\"p\">);</span>\r\n\r\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">PostsContainer</span><span class=\"p\">;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>We also need to create this component which will interact with the consumer via props. Now theoretically we could just create this in the same file, since we should not use this separately, however for testability, this approach is better.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight jsx\"><code><span class=\"c1\">// components/PostsView.js</span>\r\n<span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\'</span><span class=\"s1\">react</span><span class=\"dl\">\'</span><span class=\"p\">;</span>\r\n\r\n<span class=\"kd\">class</span> <span class=\"nx\">PostsView</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">posts</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">;</span>\r\n    <span class=\"k\">return</span> <span class=\"nx\">posts</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">?</span> <span class=\"p\">(</span>\r\n      <span class=\"nx\">posts</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(({</span> <span class=\"nx\">title</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">date</span><span class=\"p\">,</span> <span class=\"nx\">slug</span><span class=\"p\">,</span> <span class=\"nx\">excerpt</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">rendered</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;)</span>\r\n    <span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"p\">(</span>\r\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>Loading...<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\r\n    <span class=\"p\">);</span>\r\n  <span class=\"p\">}</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">PostsView</span><span class=\"p\">;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>At this point we do not have any data coming in, so before we add actual server-side data, we\'ll just add the following dummy data to initialize the Store with:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Store.js</span>\r\n<span class=\"kd\">class</span> <span class=\"nx\">Store</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\r\n    <span class=\"na\">posts</span><span class=\"p\">:</span> <span class=\"p\">[</span>\r\n      <span class=\"p\">{</span>\r\n        <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\r\n        <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">rendered</span><span class=\"p\">:</span> <span class=\"dl\">\'</span><span class=\"s1\">Hello, HardCoded Data!</span><span class=\"dl\">\'</span> <span class=\"p\">},</span>\r\n        <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"dl\">\'</span><span class=\"s1\">2018-04-17T00:17:18.040Z</span><span class=\"dl\">\'</span><span class=\"p\">,</span>\r\n        <span class=\"na\">slug</span><span class=\"p\">:</span> <span class=\"dl\">\'</span><span class=\"s1\">hello-world</span><span class=\"dl\">\'</span><span class=\"p\">,</span>\r\n        <span class=\"na\">excerpt</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">rendered</span><span class=\"p\">:</span> <span class=\"dl\">\'</span><span class=\"s1\">Some random text from the excerpt.</span><span class=\"dl\">\'</span> <span class=\"p\">},</span>\r\n      <span class=\"p\">},</span>\r\n    <span class=\"p\">],</span>\r\n  <span class=\"p\">};</span>\r\n  <span class=\"c1\">// ...</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The post object is the exact structure that is returned by the WordPress REST API. Finally let\'s add the container component and the store to the application itself.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight jsx\"><code><span class=\"c1\">// App.js</span>\r\n<span class=\"c1\">// ... imports</span>\r\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\r\n      <span class=\"p\">&lt;</span><span class=\"nc\">Store</span><span class=\"p\">&gt;</span>\r\n        <span class=\"p\">&lt;</span><span class=\"nc\">PostsContainer</span> <span class=\"p\">/&gt;</span>\r\n      <span class=\"p\">&lt;/</span><span class=\"nc\">Store</span><span class=\"p\">&gt;</span>\r\n    <span class=\"p\">);</span>\r\n  <span class=\"p\">}</span>\r\n<span class=\"p\">}</span>\r\n\r\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Let\'s take a look at how to actually retrieve data:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight jsx\"><code><span class=\"c1\">// Store.js</span>\r\n<span class=\"kd\">class</span> <span class=\"nx\">Store</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\r\n  <span class=\"c1\">// ...</span>\r\n  <span class=\"nx\">loadPosts</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\r\n    <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\'</span><span class=\"s1\">/wp-json/wp/v2/posts</span><span class=\"dl\">\'</span><span class=\"p\">)</span>\r\n      <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">())</span>\r\n      <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">posts</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"nx\">posts</span> <span class=\"p\">}));</span>\r\n  <span class=\"p\">};</span>\r\n\r\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"kd\">const</span> <span class=\"p\">{</span>\r\n      <span class=\"na\">state</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">posts</span> <span class=\"p\">},</span>\r\n      <span class=\"na\">props</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">children</span> <span class=\"p\">},</span>\r\n      <span class=\"nx\">loadPosts</span><span class=\"p\">,</span>\r\n    <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\r\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">Provider</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">{</span> <span class=\"nx\">posts</span><span class=\"p\">,</span> <span class=\"nx\">loadPosts</span> <span class=\"p\">}</span><span class=\"si\">}</span><span class=\"p\">&gt;</span><span class=\"si\">{</span><span class=\"nx\">children</span><span class=\"si\">}</span><span class=\"p\">&lt;/</span><span class=\"nc\">Provider</span><span class=\"p\">&gt;;</span>\r\n  <span class=\"p\">}</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Here we added a new method called&nbsp;<code>loadPosts</code>, which makes a network call and upon recieving data, it will set the state to the new data, which in turn will also update each&nbsp;<code>Consumer</code>. We also need to add the new method to the provider\'s values. This is what we\'d do when we provide the&nbsp;<code>mapDispatchToProps</code>&nbsp;parameter of&nbsp;<code>redux-connect</code>. The final thing we have to do is make use of it in the&nbsp;<code>PostsView</code>&nbsp;component.</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight jsx\"><code><span class=\"c1\">// components/PostsView.js</span>\r\n<span class=\"kd\">class</span> <span class=\"nx\">PostsView</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\r\n  <span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\r\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">loadPosts</span><span class=\"p\">();</span>\r\n  <span class=\"p\">}</span>\r\n  <span class=\"c1\">// ...</span>\r\n<span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>This is way simpler than doing it with thunks or&nbsp;<code>redux-saga</code>, however we are still coupling all our logic in a single component, which is better than having it in the state of each individual component, but may get clunky with large applications.</p>\r\n<p>In the next and final post of this series we\'ll see how we can integrate React Router with this application as well as adding a method to retrieve a single post. If you are already familiar with React Router, you\'ll know how to go on about creating the rest of the site using WordPress and React. Otherwise, be on the lookout for the next post.</p>\r\n<p>Happy hacking! 😉</p>\r\n</div>', '', 1, '2024-06-05 06:10:22', 3, 10, NULL);
INSERT INTO `post` (`name`, `description`, `excerpt`, `active`, `created_date`, `category_id`, `id`, `thumbnail`) VALUES
('WordPress - Minify CSS, HTML, JS files using PHP', '<p>As web developers or designers, we all have an enemy which is called Site Speed. There are so many ways to speed up your web page, we are going to discuss one of those ways. Minifying HTML, CSS &amp; JavaScript.</p>\r\n<p>Minifying means removing redundant or unnecessary data such as spacing, well-named variables, and comments.</p>\r\n<p>The minified version of the code [HTML, CSS, JavaScript] is 48% smaller in general. In some cases, minification can reduce the file size by as much as 60%. For example, there\'s a 176 kb difference between the original and minified version of the jQuery/JavaScript library.</p>\r\n<p>It reduces web page load times and bandwidth usage on websites and improves website speed and accessibility.</p>\r\n<p>So, we are going to minify WordPress using a simple PHP function. Add below codes to your functions.php, if you are using a child theme add inside child-theme/functions.php.</p>\r\n<p>Step One Create a Class:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>class WP_HTML_Compression{\r\n    protected $wp_compress_css = true;\r\n    protected $wp_compress_js = true;\r\n    protected $wp_info_comment = true;\r\n    protected $wp_remove_comments = true;\r\n    protected $html;\r\n    public function __construct($html)\r\n    {\r\n        if (!empty($html)) {\r\n            $this-&gt;wp_parseHTML($html);\r\n        }\r\n    }\r\n    public function __toString()\r\n    {\r\n        return $this-&gt;html;\r\n    }\r\n    protected function wp_bottomComment($raw, $compressed)\r\n    {\r\n        $raw = strlen($raw);\r\n        $compressed = strlen($compressed);\r\n        $savings = ($raw - $compressed) / $raw * 100;\r\n        $savings = round($savings, 2);\r\n        return \'&lt;!--HTML compressed, size saved \' . $savings . \'%. From \' . $raw . \' bytes, now \' . $compressed . \' bytes--&gt;\';\r\n    }\r\n    protected function wp_minifyHTML($html)\r\n    {\r\n        $pattern = \'/&lt;(?&lt;script&gt;script).*?&lt;\\/script\\s*&gt;|&lt;(?&lt;style&gt;style).*?&lt;\\/style\\s*&gt;|&lt;!(?&lt;comment&gt;--).*?--&gt;|&lt;(?&lt;tag&gt;[\\/\\w.:-]*)(?:\".*?\"|\\\'.*?\\\'|[^\\\'\"&gt;]+)*&gt;|(?&lt;text&gt;((&lt;[^!\\/\\w.:-])?[^&lt;]*)+)|/si\';\r\n        preg_match_all($pattern, $html, $matches, PREG_SET_ORDER);\r\n        $overriding = false;\r\n        $raw_tag = false;\r\n        $html = \'\';\r\n        foreach ($matches as $token) {\r\n            $tag = (isset($token[\'tag\'])) ? strtolower($token[\'tag\']) : null;\r\n            $content = $token[0];\r\n            if (is_null($tag)) {\r\n                if (!empty($token[\'script\'])) {\r\n                    $strip = $this-&gt;wp_compress_js;\r\n                } else if (!empty($token[\'style\'])) {\r\n                    $strip = $this-&gt;wp_compress_css;\r\n                } else if ($content == \'&lt;!--wp-html-compression no compression--&gt;\') {\r\n                    $overriding = !$overriding;\r\n                    continue;\r\n                } else if ($this-&gt;wp_remove_comments) {\r\n                    if (!$overriding &amp;&amp; $raw_tag != \'textarea\') {\r\n                        $content = preg_replace(\'/&lt;!--(?!\\s*(?:\\[if [^\\]]+]|&lt;!|&gt;))(?:(?!--&gt;).)*--&gt;/s\', \'\', $content);\r\n                    }\r\n                }\r\n            } else {\r\n                if ($tag == \'pre\' || $tag == \'textarea\') {\r\n                    $raw_tag = $tag;\r\n                } else if ($tag == \'/pre\' || $tag == \'/textarea\') {\r\n                    $raw_tag = false;\r\n                } else {\r\n                    if ($raw_tag || $overriding) {\r\n                        $strip = false;\r\n                    } else {\r\n                        $strip = true;\r\n                        $content = preg_replace(\'/(\\s+)(\\w++(?&lt;!\\baction|\\balt|\\bcontent|\\bsrc)=\"\")/\', \'$1\', $content);\r\n                        $content = str_replace(\' /&gt;\', \'/&gt;\', $content);\r\n                    }\r\n                }\r\n            }\r\n            if ($strip) {\r\n                $content = $this-&gt;wp_removeWhiteSpace($content);\r\n            }\r\n            $html .= $content;\r\n        }\r\n        return $html;\r\n    }\r\n    public function wp_parseHTML($html)\r\n    {\r\n        $this-&gt;html = $this-&gt;wp_minifyHTML($html);\r\n        if ($this-&gt;wp_info_comment) {\r\n            $this-&gt;html .= \"\\n\" . $this-&gt;wp_bottomComment($html, $this-&gt;html);\r\n        }\r\n    }\r\n    protected function wp_removeWhiteSpace($str)\r\n    {\r\n        $str = str_replace(\"\\t\", \' \', $str);\r\n        $str = str_replace(\"\\n\",  \'\', $str);\r\n        $str = str_replace(\"\\r\",  \'\', $str);\r\n        $str = str_replace(\" This function requires postMessage and CORS (if the site is cross domain).\", \'\', $str);\r\n        while (stristr($str, \'  \')) {\r\n            $str = str_replace(\'  \', \' \', $str);\r\n        }\r\n        return $str;\r\n    }\r\n }\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Step Two call the functions:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>function wp_html_compression_finish($html)\r\n {\r\n    return new WP_HTML_Compression($html);\r\n }\r\n function wp_wp_html_compression_start()\r\n {\r\n    ob_start(\'wp_html_compression_finish\');\r\n }\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Final step call Wp hook:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>add_action(\'get_header\', \'wp_wp_html_compression_start\');\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>All to getherL</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight plaintext\"><code>class WP_HTML_Compression{\r\n    protected $wp_compress_css = true;\r\n    protected $wp_compress_js = true;\r\n    protected $wp_info_comment = true;\r\n    protected $wp_remove_comments = true;\r\n    protected $html;\r\n    public function __construct($html)\r\n    {\r\n        if (!empty($html)) {\r\n            $this-&gt;wp_parseHTML($html);\r\n        }\r\n    }\r\n    public function __toString()\r\n    {\r\n        return $this-&gt;html;\r\n    }\r\n    protected function wp_bottomComment($raw, $compressed)\r\n    {\r\n        $raw = strlen($raw);\r\n        $compressed = strlen($compressed);\r\n        $savings = ($raw - $compressed) / $raw * 100;\r\n        $savings = round($savings, 2);\r\n        return \'&lt;!--HTML compressed, size saved \' . $savings . \'%. From \' . $raw . \' bytes, now \' . $compressed . \' bytes--&gt;\';\r\n    }\r\n    protected function wp_minifyHTML($html)\r\n    {\r\n        $pattern = \'/&lt;(?&lt;script&gt;script).*?&lt;\\/script\\s*&gt;|&lt;(?&lt;style&gt;style).*?&lt;\\/style\\s*&gt;|&lt;!(?&lt;comment&gt;--).*?--&gt;|&lt;(?&lt;tag&gt;[\\/\\w.:-]*)(?:\".*?\"|\\\'.*?\\\'|[^\\\'\"&gt;]+)*&gt;|(?&lt;text&gt;((&lt;[^!\\/\\w.:-])?[^&lt;]*)+)|/si\';\r\n        preg_match_all($pattern, $html, $matches, PREG_SET_ORDER);\r\n        $overriding = false;\r\n        $raw_tag = false;\r\n        $html = \'\';\r\n        foreach ($matches as $token) {\r\n            $tag = (isset($token[\'tag\'])) ? strtolower($token[\'tag\']) : null;\r\n            $content = $token[0];\r\n            if (is_null($tag)) {\r\n                if (!empty($token[\'script\'])) {\r\n                    $strip = $this-&gt;wp_compress_js;\r\n                } else if (!empty($token[\'style\'])) {\r\n                    $strip = $this-&gt;wp_compress_css;\r\n                } else if ($content == \'&lt;!--wp-html-compression no compression--&gt;\') {\r\n                    $overriding = !$overriding;\r\n                    continue;\r\n                } else if ($this-&gt;wp_remove_comments) {\r\n                    if (!$overriding &amp;&amp; $raw_tag != \'textarea\') {\r\n                        $content = preg_replace(\'/&lt;!--(?!\\s*(?:\\[if [^\\]]+]|&lt;!|&gt;))(?:(?!--&gt;).)*--&gt;/s\', \'\', $content);\r\n                    }\r\n                }\r\n            } else {\r\n                if ($tag == \'pre\' || $tag == \'textarea\') {\r\n                    $raw_tag = $tag;\r\n                } else if ($tag == \'/pre\' || $tag == \'/textarea\') {\r\n                    $raw_tag = false;\r\n                } else {\r\n                    if ($raw_tag || $overriding) {\r\n                        $strip = false;\r\n                    } else {\r\n                        $strip = true;\r\n                        $content = preg_replace(\'/(\\s+)(\\w++(?&lt;!\\baction|\\balt|\\bcontent|\\bsrc)=\"\")/\', \'$1\', $content);\r\n                        $content = str_replace(\' /&gt;\', \'/&gt;\', $content);\r\n                    }\r\n                }\r\n            }\r\n            if ($strip) {\r\n                $content = $this-&gt;wp_removeWhiteSpace($content);\r\n            }\r\n            $html .= $content;\r\n        }\r\n        return $html;\r\n    }\r\n    public function wp_parseHTML($html)\r\n    {\r\n        $this-&gt;html = $this-&gt;wp_minifyHTML($html);\r\n        if ($this-&gt;wp_info_comment) {\r\n            $this-&gt;html .= \"\\n\" . $this-&gt;wp_bottomComment($html, $this-&gt;html);\r\n        }\r\n    }\r\n    protected function wp_removeWhiteSpace($str)\r\n    {\r\n        $str = str_replace(\"\\t\", \' \', $str);\r\n        $str = str_replace(\"\\n\",  \'\', $str);\r\n        $str = str_replace(\"\\r\",  \'\', $str);\r\n        $str = str_replace(\" This function requires postMessage and CORS (if the site is cross domain).\", \'\', $str);\r\n        while (stristr($str, \'  \')) {\r\n            $str = str_replace(\'  \', \' \', $str);\r\n        }\r\n        return $str;\r\n    }\r\n }\r\n function wp_html_compression_finish($html)\r\n {\r\n    return new WP_HTML_Compression($html);\r\n }\r\n function wp_wp_html_compression_start()\r\n {\r\n    ob_start(\'wp_html_compression_finish\');\r\n }\r\n add_action(\'get_header\', \'wp_wp_html_compression_start\');\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Conclusion:<br>Instead of using plugins to minify simply add this function to your WordPress site and see the magic🏃&zwj;♂️.</p>', '<p>As web developers or designers, we all have an enemy which is called Site Speed. There are so many ways to speed up your web page, we are going to discuss one of those ways. Minifying HTML, CSS &amp; JavaScript.</p>', 1, '2024-06-05 06:10:22', 3, 11, 'https___dev-to-uploads.s3.amazonaws.com_uploads_articles_uln20macldcwoxlebngb.jpg'),
('Laravel API Series: Validation and Table Relationships', '<h2>What you\'ll learn</h2>\r\n<p>In this part of the series, you\'ll learn the following:</p>\r\n<ul>\r\n<li>What is validation</li>\r\n<li>How to implement validation in Laravel</li>\r\n<li>Implement table relationships</li>\r\n</ul>\r\n<h2><a href=\"https://dev.to/olodocoder/laravel-api-series-validation-and-table-relationships-491#what-is-validation\" name=\"what-is-validation\"></a>What is Validation?</h2>\r\n<p>Validation, in the scope of this project, is the process of making sure the input going into the API is the required and acceptable one, and the output the API is sending back to the user is the correct and useful one.</p>\r\n<h2><a href=\"https://dev.to/olodocoder/laravel-api-series-validation-and-table-relationships-491#validation-in-laravel\" name=\"validation-in-laravel\"></a>Validation in Laravel</h2>\r\n<p>Laravel makes validation easy to work with by providing developers with a&nbsp;<code>validate</code>&nbsp;method that is available on all incoming&nbsp;<code>HTTP</code>&nbsp;requests. That said, to show you how validation works in Laravel, I\'ll set up validation for the&nbsp;<code>store</code>&nbsp;functions of both the&nbsp;<code>PostController</code>&nbsp;and&nbsp;<code>AuthorController</code>.</p>\r\n<p>First, I\'ll check what I get when I send nothing with the&nbsp;<code>POST</code>&nbsp;request in Postman:<br><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IfQyJWMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1mbpwhcmm0505re3fig.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IfQyJWMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1mbpwhcmm0505re3fig.png\" alt=\"default validation error\" width=\"800\" height=\"430\" loading=\"lazy\"></a></p>\r\n<ul>\r\n<li>The purple box is the type of request I made, which is a&nbsp;<code>POST</code>&nbsp;request.</li>\r\n<li>The yellow box is the URL I sent the request to;&nbsp;<code>localhost:8000/api/posts</code>.</li>\r\n<li>The red box is the data I sent with the request, which is nothing.</li>\r\n<li>The green box is the result of the request, which is the default validation error, telling me&nbsp;<code>Field \'title\' doesn\'t have a default value</code>, which means I need to provide the&nbsp;<code>title</code>&nbsp;of the post I want to create, not because it\'s required though, but because it is listed in the&nbsp;<code>$fillable</code>&nbsp;array inside the&nbsp;<code>Post</code>&nbsp;model and because I didn\'t add a default value to it inside the migrations file. But that error doesn\'t look good, and most times, you only want a simple error message like&nbsp;<code>\"title is required\"</code>&nbsp;or something similar that you can send back to the client, so they know what the issue is and how to move forward.</li>\r\n</ul>\r\n<p>So to send a better error message, go to your&nbsp;<code>PostController</code>\'s&nbsp;<code>store</code>&nbsp;function and add the following code:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code>        <span class=\"nv\">$request</span><span class=\"o\">-&gt;</span><span class=\"nf\">validate</span><span class=\"p\">([</span>\r\n            <span class=\"s1\">\'title\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'required\'</span><span class=\"p\">,</span>\r\n            <span class=\"s1\">\'author_id\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'required\'</span><span class=\"p\">,</span>\r\n            <span class=\"s1\">\'body\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'required\'</span>\r\n        <span class=\"p\">]);</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The above code makes use of the&nbsp;<code>validate</code>&nbsp;method on the&nbsp;<code>$request</code>&nbsp;object, and adds the required fields as an array, in my case the&nbsp;<code>title</code>,&nbsp;<code>author_id</code>, and&nbsp;<code>body</code>&nbsp;fields are required to successfully create a post.<br>So your&nbsp;<code>store</code>&nbsp;function now looks like so:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">store</span><span class=\"p\">(</span><span class=\"kt\">Request</span> <span class=\"nv\">$request</span><span class=\"p\">)</span>\r\n    <span class=\"p\">{</span>\r\n        <span class=\"nv\">$request</span><span class=\"o\">-&gt;</span><span class=\"nf\">validate</span><span class=\"p\">([</span>\r\n            <span class=\"s1\">\'title\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'required\'</span><span class=\"p\">,</span>\r\n            <span class=\"s1\">\'author_id\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'required\'</span><span class=\"p\">,</span>\r\n            <span class=\"s1\">\'body\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'required\'</span>\r\n        <span class=\"p\">]);</span>\r\n        <span class=\"k\">return</span> <span class=\"nc\">Post</span><span class=\"o\">::</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"nv\">$request</span><span class=\"o\">-&gt;</span><span class=\"nf\">all</span><span class=\"p\">());</span>\r\n    <span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>Now send the same request I sent at the beginning of the section to see the new and readable error message:<br><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rhStSO-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhvvxf22viibaph5zii4.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rhStSO-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhvvxf22viibaph5zii4.png\" alt=\"readable error message\" width=\"800\" height=\"430\" loading=\"lazy\"></a><br>The description of the above image is the same as the previous one, except for the green box, which in this case, shows nicely formatted error messages.</p>\r\n<blockquote>\r\n<p>Note: You need to set the&nbsp;<code>Accept</code>&nbsp;header in your HTTP client to&nbsp;<code>application/json</code>&nbsp;for all your requests, especially when you set validation messages like you did above or the&nbsp;<code>validate</code>&nbsp;method might not work.</p>\r\n</blockquote>\r\n<p>Lets do the same for the&nbsp;<code>AuthorController</code>\'s&nbsp;<code>store</code>&nbsp;function, like so:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">store</span><span class=\"p\">(</span><span class=\"kt\">Request</span> <span class=\"nv\">$request</span><span class=\"p\">)</span>\r\n    <span class=\"p\">{</span>\r\n        <span class=\"nv\">$request</span><span class=\"o\">-&gt;</span><span class=\"nf\">validate</span><span class=\"p\">([</span>\r\n            <span class=\"s1\">\'author_email\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'required|unique\'</span><span class=\"p\">,</span>\r\n            <span class=\"s1\">\'author_name\'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">\'required\'</span><span class=\"p\">,</span>\r\n        <span class=\"p\">]);</span>\r\n        <span class=\"k\">return</span> <span class=\"nc\">Author</span><span class=\"o\">::</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"nv\">$request</span><span class=\"o\">-&gt;</span><span class=\"nf\">all</span><span class=\"p\">());</span>\r\n    <span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<blockquote>\r\n<p>Notice the&nbsp;<code>required|unique</code>?, this allows you to avoid saving the same Author to the database multiple times by making sure all the requests to create a new Author contain an email that has not been previously registered.</p>\r\n</blockquote>\r\n<p>This is all for validation in our application, you can read more on validation in Laravel&nbsp;<a href=\"https://laravel.com/docs/9.x/validation\">here</a>. Next, we\'ll move on to table relationships continuation.</p>\r\n<h2><a href=\"https://dev.to/olodocoder/laravel-api-series-validation-and-table-relationships-491#table-relationships-contd\" name=\"table-relationships-contd\"></a>Table relationships (Contd.)</h2>\r\n<p>In the first part of the series, you learned that to use the relationship feature in Laravel, you need to have two or more tables in the database.</p>\r\n<p>In this section, I\'m going to show you how to connect the&nbsp;<code>Author</code>&nbsp;table to the&nbsp;<code>Post</code>&nbsp;in a way that a single Author can have multiple posts. To do that, go to your&nbsp;<code>Author</code>&nbsp;model file, and add the following code inside the class, like so:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">posts</span><span class=\"p\">()</span>\r\n    <span class=\"p\">{</span>\r\n        <span class=\"k\">return</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">hasMany</span><span class=\"p\">(</span><span class=\"nc\">Post</span><span class=\"o\">::</span><span class=\"n\">class</span><span class=\"p\">);</span>\r\n    <span class=\"p\">}</span> \r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The above code makes use of the&nbsp;<code>hasMany</code>&nbsp;method to create an eloquent relationship that uses the&nbsp;<code>author_id</code>&nbsp;as a foreign key to connect the tables.</p>\r\n<blockquote>\r\n<p>Note: You need to have the&nbsp;<code>\'author_id\'</code>&nbsp;in your post table for the above to work, else you\'ll need to put the name of the field you use to uniquely identify each author as a foreign key next to the class so:&nbsp;<code>$this-&gt;hasMany(Post::class, \'foreign_key\')</code>. The above code works without the foreign key because Laravel assumes that you use the parent model name with&nbsp;<code>_id</code>&nbsp;suffix as your foreign key, which is correct in my case:&nbsp;<code>author_id</code>.</p>\r\n</blockquote>\r\n<p>Next, you need to create a controller function that returns the list of posts for a particular author, you do that inside the&nbsp;<code>AuthorController</code>&nbsp;like so:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">get_posts</span><span class=\"p\">(</span><span class=\"nv\">$id</span><span class=\"p\">)</span>\r\n    <span class=\"p\">{</span>\r\n        <span class=\"nv\">$posts</span> <span class=\"o\">=</span> <span class=\"nc\">Author</span><span class=\"o\">::</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"nv\">$id</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">posts</span><span class=\"p\">;</span>\r\n        <span class=\"k\">return</span> <span class=\"nv\">$posts</span><span class=\"p\">;</span>\r\n    <span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The above code makes use of the&nbsp;<code>find</code>&nbsp;method with the&nbsp;<code>id</code>&nbsp;as a parameter on the Author model, and then it returns all the posts of that author.</p>\r\n<p>After that, connect the above&nbsp;<code>get_posts</code>&nbsp;function to a route by adding the following code to your&nbsp;<code>api.php</code>&nbsp;file like so:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"nc\">Route</span><span class=\"o\">::</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"s1\">\'/author/posts/{id}\'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nc\">AuthorController</span><span class=\"o\">::</span><span class=\"n\">class</span><span class=\"p\">,</span> <span class=\"s1\">\'get_posts\'</span><span class=\"p\">]);</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The above route connects the&nbsp;<code>get_posts</code>&nbsp;function to any GET request that goes to the&nbsp;<code>http://localhost:8000/api/authors/posts/2 route</code>, which will then return all the posts for the author with the&nbsp;<code>id</code>&nbsp;of 2 like so:</p>\r\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ffU2mTTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/von93ulnupwin4hdani0.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ffU2mTTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/von93ulnupwin4hdani0.png\" alt=\"author posts\" width=\"800\" height=\"430\" loading=\"lazy\"></a></p>\r\n<ul>\r\n<li>The purple box is the type of request I made, which is a&nbsp;<code>GET</code>&nbsp;request.</li>\r\n<li>The yellow box is the URL I sent the request to;&nbsp;<code>http://localhost:8000/api/author/posts/2</code>.</li>\r\n<li>The green box is the result, which is all the posts that belong to the author.</li>\r\n</ul>\r\n<h3><a href=\"https://dev.to/olodocoder/laravel-api-series-validation-and-table-relationships-491#connecting-a-post-to-a-single-author\" name=\"connecting-a-post-to-a-single-author\"></a>Connecting a post to a single author</h3>\r\n<p>We\'ve looked at how to get posts from a single author. Now let\'s look at how to get the author of a post. To do this, add the following code to your&nbsp;<code>Post</code>&nbsp;model:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">Author</span><span class=\"p\">()</span>\r\n    <span class=\"p\">{</span>\r\n        <span class=\"k\">return</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"nf\">belongsTo</span><span class=\"p\">(</span><span class=\"nc\">Author</span><span class=\"o\">::</span><span class=\"n\">class</span><span class=\"p\">);</span>\r\n    <span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The above code connects the&nbsp;<code>Post</code>&nbsp;table to the&nbsp;<code>Author</code>&nbsp;table inversely. After that, add the following code to the&nbsp;<code>PostController</code>&nbsp;like so:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code>    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"n\">get_author</span><span class=\"p\">(</span><span class=\"nv\">$id</span><span class=\"p\">)</span>\r\n    <span class=\"p\">{</span>\r\n        <span class=\"nv\">$author</span> <span class=\"o\">=</span> <span class=\"nc\">Post</span><span class=\"o\">::</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"nv\">$id</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">author</span><span class=\"p\">;</span>\r\n        <span class=\"k\">return</span> <span class=\"nv\">$author</span><span class=\"p\">;</span>\r\n    <span class=\"p\">}</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The above code makes use of the&nbsp;<code>find</code>&nbsp;method with the&nbsp;<code>id</code>&nbsp;as a parameter on the Post model, and then it returns the author of that post.</p>\r\n<p>Next, connect the above&nbsp;<code>get_author</code>&nbsp;function to a route by adding the following code to your&nbsp;<code>api.php</code>&nbsp;file like so:</p>\r\n<div class=\"highlight js-code-highlight\">\r\n<pre class=\"highlight php\"><code><span class=\"nc\">Route</span><span class=\"o\">::</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"s1\">\'/posts/author/{id}\'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nc\">PostController</span><span class=\"o\">::</span><span class=\"n\">class</span><span class=\"p\">,</span> <span class=\"s1\">\'get_author\'</span><span class=\"p\">]);</span>\r\n</code></pre>\r\n<div class=\"highlight__panel js-actions-panel\">\r\n<div class=\"highlight__panel-action js-fullscreen-code-action\">&nbsp;</div>\r\n</div>\r\n</div>\r\n<p>The above route connects the&nbsp;<code>get_author</code>&nbsp;function to any GET request that goes to the&nbsp;<code>http://localhost:8000/api/post/author/6</code>&nbsp;route, which will then return the author of the post with the&nbsp;<code>id</code>&nbsp;of 6 like so:</p>\r\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jT6MpH-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vy6o95bzz8lyd66go53.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jT6MpH-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vy6o95bzz8lyd66go53.png\" alt=\"post author result\" width=\"800\" height=\"430\" loading=\"lazy\"></a></p>\r\n<ul>\r\n<li>The purple box is the type of request I made, which is a&nbsp;<code>GET</code>&nbsp;request.</li>\r\n<li>The yellow box is the URL I sent the request to;&nbsp;<code>http://localhost:8000/api/post/author/6</code>.</li>\r\n<li>The green box is the result, which is the author of the post.</li>\r\n</ul>\r\n<h2><a href=\"https://dev.to/olodocoder/laravel-api-series-validation-and-table-relationships-491#recap\" name=\"recap\"></a>Recap</h2>\r\n<p>In this part of the series, you learned about and how to do the following:</p>\r\n<ul>\r\n<li>Check if the validation works on an endpoint</li>\r\n<li>Validate the request object using the&nbsp;<code>validate</code>&nbsp;method</li>\r\n<li>Create a one-to-many relationship between&nbsp;<code>Author</code>&nbsp;and&nbsp;<code>Post</code>&nbsp;using the&nbsp;<code>hasMany</code>&nbsp;method</li>\r\n<li>Create the inverse of the one-to-many relationship between&nbsp;<code>Author</code>&nbsp;and&nbsp;<code>Post</code>&nbsp;using the&nbsp;<code>belongsTo</code>&nbsp;method</li>\r\n<li>Connect the newly created functionalities to routes</li>\r\n</ul>\r\n<p>In the next part, you\'ll learn how to set up Laravel Sanctum for the API authentication, and create the Sign-Up, Sign In, and Logout functionalities.</p>\r\n<p>Please use the comment section for suggestions and feedback, I would really appreciate that. I hope you enjoyed the article!</p>', '', 1, '2024-06-05 06:10:22', 4, 12, 'https___dev-to-uploads.s3.amazonaws.com_uploads_articles_mchfhll6rf7shesyk459.png');

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `user`
--

CREATE TABLE `user` (
  `name` varchar(50) NOT NULL,
  `username` varchar(50) NOT NULL,
  `email` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `join_date` datetime DEFAULT NULL,
  `user_role` enum('ADMIN','USER') DEFAULT NULL,
  `id` int(11) NOT NULL,
  `thumbnail` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Đang đổ dữ liệu cho bảng `user`
--

INSERT INTO `user` (`name`, `username`, `email`, `password`, `active`, `join_date`, `user_role`, `id`, `thumbnail`) VALUES
('Admin', 'Admin', 'admin@gmail.com', '25d55ad283aa400af464c76d713c07ad', 1, '2024-06-05 05:52:21', 'ADMIN', 1, NULL);

--
-- Chỉ mục cho các bảng đã đổ
--

--
-- Chỉ mục cho bảng `alembic_version`
--
ALTER TABLE `alembic_version`
  ADD PRIMARY KEY (`version_num`);

--
-- Chỉ mục cho bảng `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id`);

--
-- Chỉ mục cho bảng `post`
--
ALTER TABLE `post`
  ADD PRIMARY KEY (`id`),
  ADD KEY `category_id` (`category_id`);

--
-- Chỉ mục cho bảng `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email` (`email`),
  ADD UNIQUE KEY `username` (`username`);

--
-- AUTO_INCREMENT cho các bảng đã đổ
--

--
-- AUTO_INCREMENT cho bảng `category`
--
ALTER TABLE `category`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT cho bảng `post`
--
ALTER TABLE `post`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- AUTO_INCREMENT cho bảng `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- Các ràng buộc cho các bảng đã đổ
--

--
-- Các ràng buộc cho bảng `post`
--
ALTER TABLE `post`
  ADD CONSTRAINT `post_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
